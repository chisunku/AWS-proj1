{"ast":null,"code":"import { __awaiter as e, __generator as n } from \"tslib\";\nimport { Auth as t } from \"aws-amplify\";\nimport r from \"lodash/get\";\nimport i from \"lodash/pickBy\";\nimport { createMachine as a, sendUpdate as s, assign as o } from \"xstate\";\nimport { runValidators as d } from \"../../validators/index.js\";\nimport { clearError as c, clearFormValues as u, clearTouched as l, clearValidationError as p, handleInput as m, handleSubmit as g, handleBlur as f, parsePhoneNumber as v, setCredentials as U, setFieldErrors as h, setRemoteError as S, setCodeDeliveryDetails as E, setUser as y } from \"./actions.js\";\nfunction C(C) {\n  var I = C.services;\n  return a({\n    id: \"signUpActor\",\n    initial: \"init\",\n    predictableActionArguments: !0,\n    states: {\n      init: {\n        always: [{\n          target: \"confirmSignUp\",\n          cond: \"shouldInitConfirmSignUp\"\n        }, {\n          target: \"signUp\"\n        }]\n      },\n      signUp: {\n        type: \"parallel\",\n        exit: [\"clearError\", \"clearFormValues\", \"clearTouched\"],\n        states: {\n          validation: {\n            initial: \"pending\",\n            states: {\n              pending: {\n                invoke: {\n                  src: \"validateSignUp\",\n                  onDone: {\n                    target: \"valid\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"invalid\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              valid: {\n                entry: \"sendUpdate\"\n              },\n              invalid: {\n                entry: \"sendUpdate\"\n              }\n            },\n            on: {\n              CHANGE: {\n                actions: \"handleInput\",\n                target: \".pending\"\n              },\n              BLUR: {\n                actions: \"handleBlur\",\n                target: \".pending\"\n              }\n            }\n          },\n          submission: {\n            initial: \"idle\",\n            states: {\n              idle: {\n                entry: \"sendUpdate\",\n                on: {\n                  SUBMIT: {\n                    actions: \"handleSubmit\",\n                    target: \"validate\"\n                  },\n                  FEDERATED_SIGN_IN: \"federatedSignIn\"\n                }\n              },\n              federatedSignIn: {\n                tags: [\"pending\"],\n                entry: [\"sendUpdate\", \"clearError\"],\n                invoke: {\n                  src: \"federatedSignIn\",\n                  onDone: \"#signUpActor.resolved\",\n                  onError: {\n                    actions: \"setRemoteError\"\n                  }\n                }\n              },\n              validate: {\n                entry: \"sendUpdate\",\n                invoke: {\n                  src: \"validateSignUp\",\n                  onDone: {\n                    target: \"pending\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              pending: {\n                tags: [\"pending\"],\n                entry: [\"parsePhoneNumber\", \"sendUpdate\", \"clearError\"],\n                invoke: {\n                  src: \"signUp\",\n                  onDone: [{\n                    cond: \"shouldSkipConfirm\",\n                    target: \"skipConfirm\",\n                    actions: [\"setUser\", \"setCredentials\"]\n                  }, {\n                    target: \"resolved\",\n                    actions: [\"setUser\", \"setCredentials\", \"setCodeDeliveryDetails\"]\n                  }],\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setRemoteError\"\n                  }\n                }\n              },\n              skipConfirm: {\n                always: {\n                  target: \"#signUpActor.resolved\",\n                  actions: \"setAutoSignInIntent\"\n                }\n              },\n              resolved: {\n                type: \"final\",\n                always: \"#signUpActor.confirmSignUp\"\n              }\n            }\n          }\n        }\n      },\n      confirmSignUp: {\n        initial: \"edit\",\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              CHANGE: {\n                actions: \"handleInput\"\n              },\n              BLUR: {\n                actions: \"handleBlur\"\n              },\n              RESEND: \"resend\"\n            }\n          },\n          resend: {\n            tags: [\"pending\"],\n            entry: \"sendUpdate\",\n            invoke: {\n              src: \"resendConfirmationCode\",\n              onDone: {\n                target: \"edit\"\n              },\n              onError: [{\n                target: \"#signUpActor.resolved\",\n                actions: \"setAutoSignInIntent\",\n                cond: \"isUserAlreadyConfirmed\"\n              }, {\n                target: \"edit\",\n                actions: \"setRemoteError\"\n              }]\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"sendUpdate\", \"clearError\"],\n            invoke: {\n              src: \"confirmSignUp\",\n              onDone: {\n                target: \"#signUpActor.resolved\",\n                actions: \"setAutoSignInIntent\"\n              },\n              onError: {\n                target: \"edit\",\n                actions: \"setRemoteError\"\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: \"final\",\n        data: function (e, n) {\n          var t = e.authAttributes,\n            i = t.username,\n            a = t.password;\n          return {\n            user: r(n, \"data.user\") || e.user,\n            authAttributes: {\n              username: i,\n              password: a\n            },\n            intent: e.intent\n          };\n        }\n      }\n    }\n  }, {\n    guards: {\n      isUserAlreadyConfirmed: function (e, n) {\n        return \"User is already confirmed.\" === n.data.message;\n      },\n      shouldInitConfirmSignUp: function (e) {\n        return e.intent && \"confirmSignUp\" === e.intent;\n      },\n      shouldSkipConfirm: function (e, n) {\n        return n.data.userConfirmed;\n      }\n    },\n    actions: {\n      clearError: c,\n      clearFormValues: u,\n      clearTouched: l,\n      clearValidationError: p,\n      handleInput: m,\n      handleSubmit: g,\n      handleBlur: f,\n      parsePhoneNumber: v,\n      setCredentials: U,\n      setFieldErrors: h,\n      setRemoteError: S,\n      setCodeDeliveryDetails: E,\n      setUser: y,\n      sendUpdate: s(),\n      setAutoSignInIntent: o({\n        intent: function (e) {\n          return \"autoSignIn\";\n        }\n      })\n    },\n    services: {\n      confirmSignUp: function (t, i) {\n        return e(this, void 0, void 0, function () {\n          var e, i, a, s, o;\n          return n(this, function (n) {\n            switch (n.label) {\n              case 0:\n                return e = t.user, i = t.authAttributes, a = t.formValues, s = a.confirmation_code, o = r(e, \"username\") || r(i, \"username\"), [4, I.handleConfirmSignUp({\n                  username: o,\n                  code: s\n                })];\n              case 1:\n                return [2, n.sent()];\n            }\n          });\n        });\n      },\n      resendConfirmationCode: function (i, a) {\n        return e(this, void 0, void 0, function () {\n          var e, a, s;\n          return n(this, function (n) {\n            return e = i.user, a = i.authAttributes, s = r(e, \"username\") || r(a, \"username\"), [2, t.resendSignUp(s)];\n          });\n        });\n      },\n      federatedSignIn: function (r, i) {\n        return e(this, void 0, void 0, function () {\n          var e;\n          return n(this, function (n) {\n            switch (n.label) {\n              case 0:\n                return e = i.data.provider, [4, t.federatedSignIn({\n                  provider: e\n                })];\n              case 1:\n                return [2, n.sent()];\n            }\n          });\n        });\n      },\n      signUp: function (t, r) {\n        return e(this, void 0, void 0, function () {\n          var e, r, a, s, o, d, c;\n          return n(this, function (n) {\n            switch (n.label) {\n              case 0:\n                return e = t.formValues, r = t.loginMechanisms, a = r[0], o = (s = e)[void 0 === a ? \"username\" : a], d = s.password, c = i(e, function (e, n) {\n                  switch (n) {\n                    case \"address\":\n                    case \"birthdate\":\n                    case \"email\":\n                    case \"family_name\":\n                    case \"gender\":\n                    case \"given_name\":\n                    case \"locale\":\n                    case \"middle_name\":\n                    case \"name\":\n                    case \"nickname\":\n                    case \"phone_number\":\n                    case \"picture\":\n                    case \"preferred_username\":\n                    case \"profile\":\n                    case \"updated_at\":\n                    case \"website\":\n                    case \"zoneinfo\":\n                      return !0;\n                    default:\n                      return n.startsWith(\"custom:\");\n                  }\n                }), [4, I.handleSignUp({\n                  username: o,\n                  password: d,\n                  attributes: c\n                })];\n              case 1:\n                return [2, n.sent()];\n            }\n          });\n        });\n      },\n      validateSignUp: function (t, r) {\n        return e(this, void 0, void 0, function () {\n          return n(this, function (e) {\n            return [2, d(t.formValues, t.touched, t.passwordSettings, [I.validateFormPassword, I.validateConfirmPassword, I.validatePreferredUsername, I.validateCustomSignUp])];\n          });\n        });\n      }\n    }\n  });\n}\nexport { C as createSignUpMachine };","map":null,"metadata":{},"sourceType":"module"}
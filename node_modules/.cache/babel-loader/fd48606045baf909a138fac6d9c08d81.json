{"ast":null,"code":"import { useId as e } from \"@radix-ui/react-id\";\nimport { Presence as t } from \"@radix-ui/react-presence\";\nimport { Primitive as o } from \"@radix-ui/react-primitive\";\nimport { useComposedRefs as n } from \"@radix-ui/react-compose-refs\";\nimport { useLayoutEffect as r } from \"@radix-ui/react-use-layout-effect\";\nimport { useControllableState as i } from \"@radix-ui/react-use-controllable-state\";\nimport { createContextScope as a } from \"@radix-ui/react-context\";\nimport { composeEventHandlers as l } from \"@radix-ui/primitive\";\nimport * as s from \"react\";\nimport c from \"@babel/runtime/helpers/esm/extends\";\nconst [p, d] = a(\"Collapsible\");\nexport { d as createCollapsibleScope };\nconst [u, m] = p(\"Collapsible\");\nexport const Collapsible = /*#__PURE__*/s.forwardRef((t, n) => {\n  const {\n      __scopeCollapsible: r,\n      open: a,\n      defaultOpen: l,\n      disabled: p,\n      onOpenChange: d,\n      ...m\n    } = t,\n    [f = !1, C] = i({\n      prop: a,\n      defaultProp: l,\n      onChange: d\n    }); /*#__PURE__*/\n  return s.createElement(u, {\n    scope: r,\n    disabled: p,\n    contentId: e(),\n    open: f,\n    onOpenToggle: s.useCallback(() => C(e => !e), [C])\n  }, /*#__PURE__*/s.createElement(o.div, c({\n    \"data-state\": b(f),\n    \"data-disabled\": p ? \"\" : void 0\n  }, m, {\n    ref: n\n  })));\n}); /*#__PURE__*/\nexport const CollapsibleTrigger = /*#__PURE__*/s.forwardRef((e, t) => {\n  const {\n      __scopeCollapsible: n,\n      ...r\n    } = e,\n    i = m(\"CollapsibleTrigger\", n); /*#__PURE__*/\n  return s.createElement(o.button, c({\n    type: \"button\",\n    \"aria-controls\": i.contentId,\n    \"aria-expanded\": i.open || !1,\n    \"data-state\": b(i.open),\n    \"data-disabled\": i.disabled ? \"\" : void 0,\n    disabled: i.disabled\n  }, r, {\n    ref: t,\n    onClick: l(e.onClick, i.onOpenToggle)\n  }));\n}); /*#__PURE__*/\nexport const CollapsibleContent = /*#__PURE__*/s.forwardRef((e, o) => {\n  const {\n      forceMount: n,\n      ...r\n    } = e,\n    i = m(\"CollapsibleContent\", e.__scopeCollapsible); /*#__PURE__*/\n  return s.createElement(t, {\n    present: n || i.open\n  }, _ref => {\n    let {\n      present: e\n    } = _ref;\n    return /*#__PURE__*/s.createElement(f, c({}, r, {\n      ref: o,\n      present: e\n    }));\n  });\n}); /*#__PURE__*/\nconst f = /*#__PURE__*/s.forwardRef((e, t) => {\n  const {\n      __scopeCollapsible: i,\n      present: a,\n      children: l,\n      ...p\n    } = e,\n    d = m(\"CollapsibleContent\", i),\n    [u, f] = s.useState(a),\n    C = s.useRef(null),\n    x = n(t, C),\n    g = s.useRef(0),\n    y = g.current,\n    h = s.useRef(0),\n    R = h.current,\n    D = d.open || u,\n    v = s.useRef(D),\n    _ = s.useRef();\n  return s.useEffect(() => {\n    const e = requestAnimationFrame(() => v.current = !1);\n    return () => cancelAnimationFrame(e);\n  }, []), r(() => {\n    const e = C.current;\n    if (e) {\n      _.current = _.current || {\n        transitionDuration: e.style.transitionDuration,\n        animationDuration: e.style.animationDuration,\n        animationFillMode: e.style.animationFillMode\n      }, e.style.transitionDuration = \"0s\", e.style.animationDuration = \"0s\", e.style.animationFillMode = \"none\";\n      const t = e.getBoundingClientRect();\n      g.current = t.height, h.current = t.width, v.current || (e.style.transitionDuration = _.current.transitionDuration, e.style.animationDuration = _.current.animationDuration, e.style.animationFillMode = _.current.animationFillMode), f(a);\n    }\n  }, [d.open, a]), /*#__PURE__*/s.createElement(o.div, c({\n    \"data-state\": b(d.open),\n    \"data-disabled\": d.disabled ? \"\" : void 0,\n    id: d.contentId,\n    hidden: !D\n  }, p, {\n    ref: x,\n    style: {\n      \"--radix-collapsible-content-height\": y ? `${y}px` : void 0,\n      \"--radix-collapsible-content-width\": R ? `${R}px` : void 0,\n      ...e.style\n    }\n  }), D && l);\n});\nfunction b(e) {\n  return e ? \"open\" : \"closed\";\n}\nexport const Root = Collapsible;\nexport const Trigger = CollapsibleTrigger;\nexport const Content = CollapsibleContent;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nconst nodeToJson = require('./node2json');\nconst xmlToNodeobj = require('./xmlstr2xmlnode');\nconst x2xmlnode = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\nconst validator = require('./validator');\nexports.parse = function (xmlData) {\n  let givenOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let validationOption = arguments.length > 2 ? arguments[2] : undefined;\n  if (validationOption) {\n    if (validationOption === true) validationOption = {};\n    const result = validator.validate(xmlData, validationOption);\n    if (result !== true) {\n      throw Error(result.err.msg);\n    }\n  }\n  if (givenOptions.parseTrueNumberOnly && givenOptions.parseNodeValue !== false && !givenOptions.numParseOptions) {\n    givenOptions.numParseOptions = {\n      leadingZeros: false\n    };\n  }\n  let options = buildOptions(givenOptions, x2xmlnode.defaultOptions, x2xmlnode.props);\n  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);\n  //print(traversableObj, \"  \");\n  return nodeToJson.convertToJson(traversableObj, options);\n};\nexports.convertTonimn = require('./nimndata').convert2nimn;\nexports.getTraversalObj = xmlToNodeobj.getTraversalObj;\nexports.convertToJson = nodeToJson.convertToJson;\nexports.convertToJsonString = require('./node2json_str').convertToJsonString;\nexports.validate = validator.validate;\nexports.j2xParser = require('./json2xml');\nexports.parseToNimn = function (xmlData, schema, options) {\n  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);\n};\nfunction print(xmlNode, indentation) {\n  if (xmlNode) {\n    console.log(indentation + \"{\");\n    console.log(indentation + \"  \\\"tagName\\\": \\\"\" + xmlNode.tagname + \"\\\", \");\n    if (xmlNode.parent) {\n      console.log(indentation + \"  \\\"parent\\\": \\\"\" + xmlNode.parent.tagname + \"\\\", \");\n    }\n    console.log(indentation + \"  \\\"val\\\": \\\"\" + xmlNode.val + \"\\\", \");\n    console.log(indentation + \"  \\\"attrs\\\": \" + JSON.stringify(xmlNode.attrsMap, null, 4) + \", \");\n    if (xmlNode.child) {\n      console.log(indentation + \"\\\"child\\\": {\");\n      const indentation2 = indentation + indentation;\n      Object.keys(xmlNode.child).forEach(function (key) {\n        const node = xmlNode.child[key];\n        if (Array.isArray(node)) {\n          console.log(indentation + \"\\\"\" + key + \"\\\" :[\");\n          node.forEach(function (item, index) {\n            //console.log(indentation + \" \\\"\"+index+\"\\\" : [\")\n            print(item, indentation2);\n          });\n          console.log(indentation + \"],\");\n        } else {\n          console.log(indentation + \" \\\"\" + key + \"\\\" : {\");\n          print(node, indentation2);\n          console.log(indentation + \"},\");\n        }\n      });\n      console.log(indentation + \"},\");\n    }\n    console.log(indentation + \"},\");\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
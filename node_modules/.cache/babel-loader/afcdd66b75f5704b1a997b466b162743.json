{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport API from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport { AmplifyClass, Credentials, UniversalStorage } from '@aws-amplify/core';\nimport { DataStore } from '@aws-amplify/datastore';\n// ! We have to use this exact reference, since it gets mutated with Amplify.Auth\nimport { Amplify } from './index';\nvar requiredModules = [\n// API cannot function without Auth\nAuth,\n// Auth cannot function without Credentials\nCredentials];\n// These modules have been tested with SSR\nvar defaultModules = [API, Auth, DataStore];\nexport function withSSRContext(context) {\n  if (context === void 0) {\n    context = {};\n  }\n  var _a = context.modules,\n    modules = _a === void 0 ? defaultModules : _a,\n    req = context.req;\n  var previousConfig = Amplify.configure();\n  var amplify = new AmplifyClass();\n  var storage = new UniversalStorage({\n    req: req\n  });\n  requiredModules.forEach(function (m) {\n    if (!modules.includes(m)) {\n      // @ts-ignore This expression is not constructable.\n      // Type 'Function' has no construct signatures.ts(2351)\n      amplify.register(new m.constructor());\n    }\n  });\n  // Associate new module instances with this amplify\n  modules.forEach(function (m) {\n    amplify.register(new m.constructor());\n  });\n  // Configure new Amplify instances with previous configuration\n  amplify.configure(__assign(__assign({}, previousConfig), {\n    storage: storage\n  }));\n  return amplify;\n}","map":null,"metadata":{},"sourceType":"module"}
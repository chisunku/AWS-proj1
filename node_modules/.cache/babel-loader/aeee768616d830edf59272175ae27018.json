{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React, { useCallback, useMemo } from 'react';\nimport { useSelector } from '@xstate/react';\nimport { getServiceFacade } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from '../../context';\nimport { USE_AUTHENTICATOR_ERROR } from './constants';\nimport { defaultComparator, getComparator, getLegacyFields, getTotpSecretCodeCallback } from './utils';\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/connected-components/authenticator/headless#useauthenticator-hook)\n */\nexport default function useAuthenticator(selector) {\n  const context = React.useContext(AuthenticatorContext);\n  if (!context) {\n    throw new Error(USE_AUTHENTICATOR_ERROR);\n  }\n  const {\n    service\n  } = context;\n  const {\n    send\n  } = service;\n  const xstateSelector = useCallback(state => Object.assign({}, getServiceFacade({\n    send,\n    state\n  })), [send]);\n  const comparator = selector ? getComparator(selector) : defaultComparator;\n  const facade = useSelector(service, xstateSelector, comparator);\n  const {\n      route,\n      user\n    } = facade,\n    rest = __rest(facade, [\"route\", \"user\"]);\n  // do not memoize output. `service.getSnapshot` reference remains stable preventing\n  // `fields` from updating with current form state on value changes\n  const serviceSnapshot = service.getSnapshot();\n  // legacy `formFields` values required until form state is removed from state machine\n  const fields = useMemo(() => getLegacyFields(route, serviceSnapshot), [route, serviceSnapshot]);\n  return Object.assign(Object.assign({}, rest), {\n    getTotpSecretCode: getTotpSecretCodeCallback(user),\n    route,\n    user,\n    /** @deprecated For internal use only */\n    fields,\n    /** @deprecated For internal use only */\n    _state: serviceSnapshot,\n    /** @deprecated For internal use only */\n    _send: send\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __rest as e } from \"tslib\";\nimport * as a from \"react\";\nimport { Item as t, Header as r, Trigger as n, Content as s } from \"@radix-ui/react-accordion\";\nimport d from \"classnames\";\nimport { ComponentClassNames as i } from \"../shared/constants.js\";\nimport { View as m } from \"../View/View.js\";\nimport { IconExpandMore as o } from \"../Icon/icons/IconExpandMore.js\";\nimport { splitPrimitiveProps as c } from \"../shared/styleUtils.js\";\nimport { useStableId as l } from \"../utils/useStableId.js\";\nconst p = \"expander-item\",\n  x = \"expander-header\",\n  E = \"expander-icon\",\n  f = \"expander-content-text\",\n  N = a.forwardRef((p, x) => {\n    var {\n        children: E,\n        className: f,\n        title: N\n      } = p,\n      h = e(p, [\"children\", \"className\", \"title\"]);\n    const I = l(),\n      j = l(),\n      {\n        rest: b\n      } = c(h);\n    return a.createElement(t, Object.assign({\n      className: d(i.ExpanderItem, f),\n      \"data-testid\": \"expander-item\",\n      ref: x\n    }, b), a.createElement(r, {\n      className: i.ExpanderHeader,\n      \"data-testid\": \"expander-header\"\n    }, a.createElement(n, {\n      \"aria-controls\": j,\n      className: i.ExpanderTrigger,\n      id: I\n    }, N, a.createElement(o, {\n      \"aria-hidden\": !0,\n      className: i.ExpanderIcon,\n      \"data-testid\": \"expander-icon\"\n    }))), a.createElement(s, {\n      \"aria-labelledby\": I,\n      className: i.ExpanderContent,\n      id: j\n    }, a.createElement(m, {\n      className: i.ExpanderContentText,\n      testId: \"expander-content-text\"\n    }, E)));\n  });\nN.displayName = \"ExpanderItem\";\nexport { f as EXPANDER_CONTENT_TEXT_TEST_ID, x as EXPANDER_HEADER_TEST_ID, E as EXPANDER_ICON_TEST_ID, p as EXPANDER_ITEM_TEST_ID, N as ExpanderItem };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useEffect, useState } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\nimport { interpret, InterpreterStatus, State, toObserver } from 'xstate';\nimport useConstant from './useConstant';\nexport function useIdleInterpreter(getMachine, options) {\n  var machine = useConstant(function () {\n    return typeof getMachine === 'function' ? getMachine() : getMachine;\n  });\n  if (process.env.NODE_ENV !== 'production' && typeof getMachine !== 'function') {\n    var _a = __read(useState(machine), 1),\n      initialMachine = _a[0];\n    if (getMachine !== initialMachine) {\n      console.warn('Machine given to `useMachine` has changed between renders. This is not supported and might lead to unexpected results.\\n' + 'Please make sure that you pass the same Machine as argument each time.');\n    }\n  }\n  var context = options.context,\n    guards = options.guards,\n    actions = options.actions,\n    activities = options.activities,\n    services = options.services,\n    delays = options.delays,\n    rehydratedState = options.state,\n    interpreterOptions = __rest(options, [\"context\", \"guards\", \"actions\", \"activities\", \"services\", \"delays\", \"state\"]);\n  var service = useConstant(function () {\n    var machineConfig = {\n      context: context,\n      guards: guards,\n      actions: actions,\n      activities: activities,\n      services: services,\n      delays: delays\n    };\n    var machineWithConfig = machine.withConfig(machineConfig, function () {\n      return __assign(__assign({}, machine.context), context);\n    });\n    return interpret(machineWithConfig, interpreterOptions);\n  });\n  // Make sure options are kept updated when they change.\n  // This mutation assignment is safe because the service instance is only used\n  // in one place -- this hook's caller.\n  useIsomorphicLayoutEffect(function () {\n    Object.assign(service.machine.options.actions, actions);\n    Object.assign(service.machine.options.guards, guards);\n    Object.assign(service.machine.options.activities, activities);\n    Object.assign(service.machine.options.services, services);\n    Object.assign(service.machine.options.delays, delays);\n  }, [actions, guards, activities, services, delays]);\n  return service;\n}\nexport function useInterpret(getMachine) {\n  var _a = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    _a[_i - 1] = arguments[_i];\n  }\n  var _b = __read(_a, 2),\n    _c = _b[0],\n    options = _c === void 0 ? {} : _c,\n    observerOrListener = _b[1];\n  var service = useIdleInterpreter(getMachine, options);\n  useEffect(function () {\n    if (!observerOrListener) {\n      return;\n    }\n    var sub = service.subscribe(toObserver(observerOrListener));\n    return function () {\n      sub.unsubscribe();\n    };\n  }, [observerOrListener]);\n  useEffect(function () {\n    var rehydratedState = options.state;\n    service.start(rehydratedState ? State.create(rehydratedState) : undefined);\n    return function () {\n      service.stop();\n      service.status = InterpreterStatus.NotStarted;\n    };\n  }, []);\n  return service;\n}","map":null,"metadata":{},"sourceType":"module"}
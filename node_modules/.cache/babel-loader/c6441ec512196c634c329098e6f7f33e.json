{"ast":null,"code":"import { Geo } from \"@aws-amplify/geo\";\nimport { COLOR_WHITE, MARKER_COLOR } from \"./constants\";\nimport { isGeoJsonSource } from \"./utils\";\nimport { FONT_DEFAULT_BY_STYLE } from \"./constants\";\nexport function drawClusterLayer(sourceName, map, _ref, mapStyle) {\n  let {\n    fillColor: markerColor = MARKER_COLOR,\n    smCircleSize: smallSize = 60,\n    smThreshold: smallThreshold = 50,\n    mdCircleSize: mediumSize = 100,\n    mdThreshold: mediumThreshold = 100,\n    lgCircleSize: largeSize = 140,\n    lgThreshold: largeThreshold = 500,\n    xlCircleSize: extraLargeSize = 180,\n    borderWidth = 4,\n    borderColor = COLOR_WHITE,\n    clusterPaint,\n    onClick,\n    showCount,\n    clusterCountLayout,\n    fontColor = COLOR_WHITE\n  } = _ref;\n  const clusterLayerId = `${sourceName}-layer-clusters`;\n  const clusterSymbolLayerId = `${sourceName}-layer-cluster-count`;\n  // Use step expressions for clusters (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n  const paintOptions = Object.assign({\n    \"circle-color\": [\"step\", [\"get\", \"point_count\"], markerColor, smallThreshold, markerColor, mediumThreshold, markerColor, largeThreshold, markerColor],\n    \"circle-radius\": [\"step\", [\"get\", \"point_count\"], smallSize, smallThreshold, mediumSize, mediumThreshold, largeSize, largeThreshold, extraLargeSize],\n    \"circle-stroke-width\": borderWidth,\n    \"circle-stroke-color\": borderColor\n  }, clusterPaint);\n  const defaultClusterLayer = {\n    id: clusterLayerId,\n    type: \"circle\",\n    source: sourceName,\n    filter: [\"has\", \"point_count\"],\n    paint: paintOptions\n  };\n  map.addLayer(Object.assign({}, defaultClusterLayer));\n  /*\n   * Inspect cluster on click\n   */\n  map.on(\"click\", clusterLayerId, function (e) {\n    if (typeof onClick === \"function\") onClick(e);\n    const features = map.queryRenderedFeatures(e.point, {\n      layers: [clusterLayerId]\n    });\n    const clusterId = features[0].properties.cluster_id;\n    const source = map.getSource(sourceName);\n    if (isGeoJsonSource(source)) {\n      source.getClusterExpansionZoom(clusterId, function (err, zoom) {\n        if (err) return;\n        map.easeTo({\n          center: features[0].geometry.coordinates,\n          zoom: zoom\n        });\n      });\n    }\n  });\n  /*\n   * Symbol Layer for cluster point count\n   */\n  if (showCount) {\n    const defaultLayoutOptions = {\n      \"text-field\": \"{point_count_abbreviated}\",\n      \"text-size\": 24\n    };\n    const locationServiceStyle = mapStyle || Geo.getDefaultMap().style;\n    if (locationServiceStyle) {\n      defaultLayoutOptions[\"text-font\"] = [FONT_DEFAULT_BY_STYLE[locationServiceStyle]];\n    }\n    const layoutOptions = Object.assign(Object.assign({}, defaultLayoutOptions), clusterCountLayout);\n    const paintOptions = {\n      \"text-color\": fontColor\n    };\n    const defaultClusterCount = {\n      id: clusterSymbolLayerId,\n      type: \"symbol\",\n      source: sourceName,\n      filter: [\"has\", \"point_count\"],\n      layout: layoutOptions,\n      paint: paintOptions\n    };\n    map.addLayer(Object.assign({}, defaultClusterCount));\n  }\n  return {\n    clusterLayerId,\n    clusterSymbolLayerId\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
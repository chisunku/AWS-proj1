{"ast":null,"code":"import { useRef, useCallback } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\nimport useConstant from './useConstant';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\nexport function isActorWithState(actorRef) {\n  return 'state' in actorRef;\n}\nfunction isDeferredActor(actorRef) {\n  return 'deferred' in actorRef;\n}\nfunction defaultGetSnapshot(actorRef) {\n  return 'getSnapshot' in actorRef ? actorRef.getSnapshot() : isActorWithState(actorRef) ? actorRef.state : undefined;\n}\nexport function useActor(actorRef, getSnapshot) {\n  if (getSnapshot === void 0) {\n    getSnapshot = defaultGetSnapshot;\n  }\n  var actorRefRef = useRef(actorRef);\n  var deferredEventsRef = useRef([]);\n  var subscribe = useCallback(function (handleStoreChange) {\n    var unsubscribe = actorRef.subscribe(handleStoreChange).unsubscribe;\n    return unsubscribe;\n  }, [actorRef]);\n  var boundGetSnapshot = useCallback(function () {\n    return getSnapshot(actorRef);\n  }, [actorRef, getSnapshot]);\n  var storeSnapshot = useSyncExternalStore(subscribe, boundGetSnapshot, boundGetSnapshot);\n  var send = useConstant(function () {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var event = args[0];\n      if (process.env.NODE_ENV !== 'production' && args.length > 1) {\n        console.warn(\"Unexpected payload: \".concat(JSON.stringify(args[1]), \". Only a single event object can be sent to actor send() functions.\"));\n      }\n      var currentActorRef = actorRefRef.current;\n      // If the previous actor is a deferred actor,\n      // queue the events so that they can be replayed\n      // on the non-deferred actor.\n      if (isDeferredActor(currentActorRef) && currentActorRef.deferred) {\n        deferredEventsRef.current.push(event);\n      } else {\n        currentActorRef.send(event);\n      }\n    };\n  });\n  useIsomorphicLayoutEffect(function () {\n    actorRefRef.current = actorRef;\n    // Dequeue deferred events from the previous deferred actorRef\n    while (deferredEventsRef.current.length > 0) {\n      var deferredEvent = deferredEventsRef.current.shift();\n      actorRef.send(deferredEvent);\n    }\n  }, [actorRef]);\n  return [storeSnapshot, send];\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __rest as e } from \"tslib\";\nimport * as a from \"react\";\nimport { Root as l } from \"@radix-ui/react-accordion\";\nimport t from \"classnames\";\nimport { useDeprecationWarning as s } from \"../../hooks/useDeprecationWarning.js\";\nimport { ComponentClassNames as r } from \"../shared/constants.js\";\nimport { splitPrimitiveProps as n } from \"../shared/styleUtils.js\";\nconst o = a.forwardRef((o, i) => {\n  var {\n      children: p,\n      className: m,\n      defaultValue: d,\n      isCollapsible: u,\n      onChange: c,\n      onValueChange: f,\n      testId: h,\n      type: g = \"single\",\n      value: C\n    } = o,\n    V = e(o, [\"children\", \"className\", \"defaultValue\", \"isCollapsible\", \"onChange\", \"onValueChange\", \"testId\", \"type\", \"value\"]);\n  const {\n      rest: b\n    } = n(V),\n    x = null != f ? f : c;\n  s({\n    shouldWarn: !!c,\n    message: \"Expander `onChange` prop will be deprecated in the next major release of @aws-amplify/ui-react. Please replace usage with `onValueChange`.\"\n  });\n  return \"multiple\" === g ? a.createElement(l, Object.assign({\n    className: t(r.Expander, m),\n    \"data-testid\": h,\n    defaultValue: d,\n    onValueChange: x,\n    ref: i,\n    type: g,\n    value: C\n  }, b), p) : a.createElement(l, Object.assign({\n    className: t(r.Expander, m),\n    collapsible: u,\n    \"data-testid\": h,\n    defaultValue: d,\n    onValueChange: x,\n    ref: i,\n    type: g,\n    value: C\n  }, b), p);\n});\no.displayName = \"Expander\";\nexport { o as Expander };","map":null,"metadata":{},"sourceType":"module"}
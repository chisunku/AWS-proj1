{"ast":null,"code":"import { useCallback, useRef } from 'react';\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector';\nimport { isActorWithState } from './useActor';\nimport { getServiceSnapshot } from './utils';\nfunction isService(actor) {\n  return 'state' in actor && 'machine' in actor;\n}\nvar defaultCompare = function (a, b) {\n  return a === b;\n};\nvar defaultGetSnapshot = function (a, initialStateCacheRef) {\n  if (isService(a)) {\n    // A status of 0 = interpreter not started\n    if (a.status === 0 && initialStateCacheRef.current) {\n      return initialStateCacheRef.current;\n    }\n    var snapshot = getServiceSnapshot(a);\n    initialStateCacheRef.current = a.status === 0 ? snapshot : null;\n    return snapshot;\n  }\n  return isActorWithState(a) ? a.state : undefined;\n};\nexport function useSelector(actor, selector, compare, getSnapshot) {\n  if (compare === void 0) {\n    compare = defaultCompare;\n  }\n  var initialStateCacheRef = useRef(null);\n  var subscribe = useCallback(function (handleStoreChange) {\n    var unsubscribe = actor.subscribe(handleStoreChange).unsubscribe;\n    return unsubscribe;\n  }, [actor]);\n  var boundGetSnapshot = useCallback(function () {\n    if (getSnapshot) {\n      return getSnapshot(actor);\n    }\n    return defaultGetSnapshot(actor, initialStateCacheRef);\n  }, [actor, getSnapshot]);\n  var selectedSnapshot = useSyncExternalStoreWithSelector(subscribe, boundGetSnapshot, boundGetSnapshot, selector, compare);\n  return selectedSnapshot;\n}","map":null,"metadata":{},"sourceType":"module"}
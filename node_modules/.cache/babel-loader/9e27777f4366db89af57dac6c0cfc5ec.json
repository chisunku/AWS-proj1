{"ast":null,"code":"import { __rest as e } from \"tslib\";\nimport r from \"classnames\";\nimport { Root as t, Track as a, Range as l, Thumb as i } from \"@radix-ui/react-slider\";\nimport * as o from \"react\";\nimport { isFunction as s, classNameModifier as d } from \"../shared/utils.js\";\nimport { ComponentClassNames as n } from \"../shared/constants.js\";\nimport \"../Field/FieldClearButton.js\";\nimport { FieldDescription as m } from \"../Field/FieldDescription.js\";\nimport { FieldErrorMessage as c } from \"../Field/FieldErrorMessage.js\";\nimport { FieldGroup as u } from \"../FieldGroup/FieldGroup.js\";\nimport { Flex as p } from \"../Flex/Flex.js\";\nimport { Label as b } from \"../Label/Label.js\";\nimport { splitPrimitiveProps as f } from \"../shared/styleUtils.js\";\nimport { View as S } from \"../View/View.js\";\nimport { useStableId as F } from \"../utils/useStableId.js\";\nconst g = \"slider-label\",\n  C = \"slider-root\",\n  E = \"slider-track\",\n  h = \"slider-range\",\n  k = o.forwardRef((g, C) => {\n    var {\n        ariaValuetext: E,\n        className: h,\n        defaultValue: k,\n        descriptiveText: v,\n        emptyTrackColor: j,\n        errorMessage: y,\n        filledTrackColor: T,\n        formatValue: V,\n        hasError: x = !1,\n        id: N,\n        isDisabled: z,\n        isValueHidden: H = !1,\n        label: R,\n        labelHidden: I = !1,\n        onChange: M,\n        orientation: w = \"horizontal\",\n        outerEndComponent: D,\n        outerStartComponent: G,\n        testId: L,\n        thumbColor: O,\n        trackSize: P,\n        dir: B,\n        value: U,\n        size: q\n      } = g,\n      A = e(g, [\"ariaValuetext\", \"className\", \"defaultValue\", \"descriptiveText\", \"emptyTrackColor\", \"errorMessage\", \"filledTrackColor\", \"formatValue\", \"hasError\", \"id\", \"isDisabled\", \"isValueHidden\", \"label\", \"labelHidden\", \"onChange\", \"orientation\", \"outerEndComponent\", \"outerStartComponent\", \"testId\", \"thumbColor\", \"trackSize\", \"dir\", \"value\", \"size\"]);\n    const J = F(N),\n      K = F(),\n      Q = F(),\n      W = v ? Q : void 0,\n      {\n        flexContainerStyleProps: X,\n        baseStyleProps: Y,\n        rest: Z\n      } = f(A),\n      $ = void 0 !== U,\n      [_, ee] = o.useState($ ? U : k),\n      re = $ ? [U] : void 0,\n      te = $ ? void 0 : [k],\n      ae = o.useCallback(e => {\n        ee(e[0]), s(M) && M(e[0]);\n      }, [M]),\n      le = o.useMemo(() => {\n        const e = s(V) ? V(_) : _;\n        return \"string\" == typeof V ? o.createElement(S, {\n          as: \"span\"\n        }, e) : e;\n      }, [_, V]),\n      ie = \"vertical\" === w,\n      oe = r(n.SliderFieldTrack, d(n.SliderFieldTrack, w), d(n.SliderFieldTrack, q)),\n      se = r(n.SliderFieldRoot, d(n.SliderFieldRoot, w), d(n.SliderFieldRoot, q), h);\n    return o.createElement(p, Object.assign({\n      className: r(n.Field, n.SliderField),\n      testId: L,\n      \"data-size\": q\n    }, Y, X), o.createElement(b, {\n      className: n.SliderFieldLabel,\n      id: K,\n      testId: \"slider-label\",\n      visuallyHidden: I\n    }, o.createElement(S, {\n      as: \"span\"\n    }, R), H ? null : le), o.createElement(m, {\n      id: Q,\n      labelHidden: I,\n      descriptiveText: v\n    }), o.createElement(u, {\n      className: n.SliderFieldGroup,\n      id: J,\n      orientation: w,\n      outerStartComponent: G,\n      outerEndComponent: D\n    }, o.createElement(t, Object.assign({\n      className: se,\n      \"data-testid\": \"slider-root\",\n      disabled: z,\n      defaultValue: te,\n      onValueChange: ae,\n      orientation: w,\n      ref: C,\n      value: re\n    }, Z), o.createElement(a, {\n      className: oe,\n      \"data-testid\": \"slider-track\",\n      style: {\n        backgroundColor: String(j),\n        [\"\" + (ie ? \"width\" : \"height\")]: P\n      }\n    }, o.createElement(l, {\n      className: r(n.SliderFieldRange, d(n.SliderFieldRange, w)),\n      \"data-testid\": \"slider-range\",\n      style: {\n        backgroundColor: String(T)\n      }\n    })), o.createElement(i, {\n      \"aria-describedby\": W,\n      \"aria-labelledby\": K,\n      \"aria-valuetext\": E,\n      className: r(n.SliderFieldThumb, d(n.SliderFieldThumb, q)),\n      style: {\n        backgroundColor: String(O)\n      }\n    }))), o.createElement(c, {\n      hasError: x,\n      errorMessage: y\n    }));\n  });\nk.displayName = \"SliderField\";\nexport { g as SLIDER_LABEL_TEST_ID, h as SLIDER_RANGE_TEST_ID, C as SLIDER_ROOT_TEST_ID, E as SLIDER_TRACK_TEST_ID, k as SliderField };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nvar signingKeyCache = {};\nvar cacheQueue = [];\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\nexport function createScope(shortDate, region, service) {\n  return shortDate + \"/\" + region + \"/\" + service + \"/\" + KEY_TYPE_IDENTIFIER;\n}\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\nexport var getSigningKey = function (sha256Constructor, credentials, shortDate, region, service) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;\n    var e_1, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          return [4 /*yield*/, hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];\n        case 1:\n          credsHash = _d.sent();\n          cacheKey = shortDate + \":\" + region + \":\" + service + \":\" + toHex(credsHash) + \":\" + credentials.sessionToken;\n          if (cacheKey in signingKeyCache) {\n            return [2 /*return*/, signingKeyCache[cacheKey]];\n          }\n          cacheQueue.push(cacheKey);\n          while (cacheQueue.length > MAX_CACHE_SIZE) {\n            delete signingKeyCache[cacheQueue.shift()];\n          }\n          key = \"AWS4\" + credentials.secretAccessKey;\n          _d.label = 2;\n        case 2:\n          _d.trys.push([2, 7, 8, 9]);\n          _a = __values([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();\n          _d.label = 3;\n        case 3:\n          if (!!_b.done) return [3 /*break*/, 6];\n          signable = _b.value;\n          return [4 /*yield*/, hmac(sha256Constructor, key, signable)];\n        case 4:\n          key = _d.sent();\n          _d.label = 5;\n        case 5:\n          _b = _a.next();\n          return [3 /*break*/, 3];\n        case 6:\n          return [3 /*break*/, 9];\n        case 7:\n          e_1_1 = _d.sent();\n          e_1 = {\n            error: e_1_1\n          };\n          return [3 /*break*/, 9];\n        case 8:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n          return [7 /*endfinally*/];\n        case 9:\n          return [2 /*return*/, signingKeyCache[cacheKey] = key];\n      }\n    });\n  });\n};\n/**\n * @internal\n */\nexport function clearCredentialCache() {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach(function (cacheKey) {\n    delete signingKeyCache[cacheKey];\n  });\n}\nfunction hmac(ctor, secret, data) {\n  var hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __rest as e } from \"tslib\";\nimport * as a from \"react\";\nimport s from \"classnames\";\nimport { classNameModifierByFlag as t, classNameModifier as i } from \"../shared/utils.js\";\nimport { ComponentClassNames as l } from \"../shared/constants.js\";\nimport { Flex as c } from \"../Flex/Flex.js\";\nimport { Input as o } from \"../Input/Input.js\";\nimport { Label as r } from \"../Label/Label.js\";\nimport { useStableId as d } from \"../utils/useStableId.js\";\nimport { useSwitch as m } from \"./useSwitch.js\";\nimport { View as n } from \"../View/View.js\";\nimport { VisuallyHidden as h } from \"../VisuallyHidden/VisuallyHidden.js\";\nconst b = a.forwardRef((b, u) => {\n  var {\n      className: p,\n      defaultChecked: k,\n      id: f,\n      isChecked: C,\n      isDisabled: w,\n      isLabelHidden: S,\n      label: j,\n      labelPosition: F,\n      name: g,\n      onChange: N,\n      size: E,\n      thumbColor: T,\n      trackCheckedColor: H,\n      trackColor: L,\n      value: v\n    } = b,\n    x = e(b, [\"className\", \"defaultChecked\", \"id\", \"isChecked\", \"isDisabled\", \"isLabelHidden\", \"label\", \"labelPosition\", \"name\", \"onChange\", \"size\", \"thumbColor\", \"trackCheckedColor\", \"trackColor\", \"value\"]);\n  const {\n      isOn: y,\n      changeHandler: I,\n      isFocused: V,\n      setIsFocused: z\n    } = m({\n      onChange: N,\n      isChecked: C,\n      defaultChecked: k,\n      isDisabled: w\n    }),\n    D = d(f),\n    O = S ? h : n,\n    P = s(l.SwitchTrack, t(l.SwitchTrack, \"checked\", y), t(l.SwitchTrack, \"disabled\", w), t(l.SwitchTrack, \"focused\", V)),\n    W = s(l.SwitchThumb, t(l.SwitchThumb, \"checked\", y), t(l.SwitchThumb, \"disabled\", w));\n  return a.createElement(c, Object.assign({\n    className: s(l.SwitchField, i(l.SwitchField, E), p),\n    \"data-size\": E,\n    \"data-label-position\": F,\n    ref: u\n  }, x), a.createElement(h, null, a.createElement(o, {\n    role: \"switch\",\n    type: \"checkbox\",\n    id: D,\n    onChange: I,\n    disabled: w,\n    name: g,\n    checked: y,\n    value: v,\n    onFocus: () => {\n      z(!0);\n    },\n    onBlur: () => {\n      z(!1);\n    }\n  })), a.createElement(r, {\n    htmlFor: D,\n    className: s(l.SwitchWrapper, i(l.SwitchWrapper, F)),\n    \"data-label-position\": F\n  }, a.createElement(O, {\n    as: \"span\",\n    className: l.SwitchLabel\n  }, j), a.createElement(n, {\n    as: \"span\",\n    className: P,\n    \"data-checked\": y,\n    \"data-disabled\": w,\n    \"data-focused\": V,\n    backgroundColor: y ? H : L\n  }, a.createElement(n, {\n    as: \"span\",\n    className: W,\n    \"data-checked\": y,\n    \"data-disabled\": w,\n    backgroundColor: T\n  }))));\n});\nb.displayName = \"SwitchField\";\nexport { b as SwitchField };","map":null,"metadata":{},"sourceType":"module"}
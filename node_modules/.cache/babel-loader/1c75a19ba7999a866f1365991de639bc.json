{"ast":null,"code":"import { __assign as t, __spreadArray as o, __rest as n } from \"tslib\";\nimport { createMachine as r, forwardTo as i, assign as e, spawn as a } from \"xstate\";\nimport { choose as s } from \"xstate/lib/actions\";\nimport { stopActor as c } from \"./actions.js\";\nimport { signInActor as u } from \"./actors/signIn.js\";\nimport { signOutActor as d } from \"./actors/signOut.js\";\nimport { resetPasswordActor as l } from \"./actors/resetPassword.js\";\nimport { defaultServices as g } from \"./defaultServices.js\";\nimport { createSignUpMachine as v } from \"./signUp.js\";\nfunction f() {\n  return r({\n    id: \"authenticator\",\n    initial: \"idle\",\n    context: {\n      user: void 0,\n      config: {},\n      services: g,\n      actorRef: void 0,\n      hasSetup: !1\n    },\n    predictableActionArguments: !0,\n    states: {\n      idle: {\n        invoke: {\n          src: \"getCurrentUser\",\n          onDone: {\n            actions: \"setUser\",\n            target: \"authenticated\"\n          },\n          onError: {\n            target: \"setup\"\n          }\n        }\n      },\n      setup: {\n        initial: \"waitConfig\",\n        states: {\n          waitConfig: {\n            on: {\n              INIT: {\n                actions: [\"configure\", \"setHasSetup\"],\n                target: \"applyConfig\"\n              }\n            }\n          },\n          applyConfig: {\n            invoke: {\n              src: \"getAmplifyConfig\",\n              onDone: {\n                actions: \"applyAmplifyConfig\",\n                target: \"goToInitialState\"\n              }\n            }\n          },\n          goToInitialState: {\n            always: [{\n              target: \"#authenticator.signUp\",\n              cond: \"isInitialStateSignUp\"\n            }, {\n              target: \"#authenticator.resetPassword\",\n              cond: \"isInitialStateResetPassword\"\n            }, {\n              target: \"#authenticator.signIn\"\n            }]\n          }\n        }\n      },\n      signIn: {\n        initial: \"spawnActor\",\n        states: {\n          spawnActor: {\n            always: {\n              actions: \"spawnSignInActor\",\n              target: \"runActor\"\n            }\n          },\n          runActor: {\n            entry: \"clearActorDoneData\",\n            exit: \"stopSignInActor\"\n          }\n        },\n        on: {\n          SIGN_UP: \"signUp\",\n          RESET_PASSWORD: \"resetPassword\",\n          \"done.invoke.signInActor\": [{\n            target: \"signUp\",\n            actions: \"setActorDoneData\",\n            cond: \"shouldRedirectToSignUp\"\n          }, {\n            target: \"resetPassword\",\n            actions: \"setActorDoneData\",\n            cond: \"shouldRedirectToResetPassword\"\n          }, {\n            target: \"authenticated\",\n            actions: \"setActorDoneData\"\n          }]\n        }\n      },\n      signUp: {\n        initial: \"spawnActor\",\n        states: {\n          spawnActor: {\n            always: {\n              actions: \"spawnSignUpActor\",\n              target: \"runActor\"\n            }\n          },\n          runActor: {\n            entry: \"clearActorDoneData\",\n            exit: \"stopSignUpActor\"\n          },\n          autoSignIn: {\n            invoke: {\n              src: \"getCurrentUser\",\n              onDone: \"#authenticator.authenticated\",\n              onError: \"#authenticator.setup.goToInitialState\"\n            }\n          }\n        },\n        on: {\n          SIGN_IN: \"signIn\",\n          \"done.invoke.signUpActor\": {\n            target: \"#authenticator.signIn\",\n            actions: \"setActorDoneData\",\n            cond: \"shouldAutoSignIn\"\n          }\n        }\n      },\n      resetPassword: {\n        initial: \"spawnActor\",\n        states: {\n          spawnActor: {\n            always: {\n              actions: \"spawnResetPasswordActor\",\n              target: \"runActor\"\n            }\n          },\n          runActor: {\n            entry: \"clearActorDoneData\",\n            exit: \"stopResetPasswordActor\"\n          }\n        },\n        on: {\n          SIGN_IN: \"signIn\",\n          \"done.invoke.resetPasswordActor\": {\n            target: \"signIn\",\n            actions: \"setActorDoneData\"\n          }\n        }\n      },\n      signOut: {\n        initial: \"spawnActor\",\n        states: {\n          spawnActor: {\n            always: {\n              actions: \"spawnSignOutActor\",\n              target: \"runActor\"\n            }\n          },\n          runActor: {\n            entry: \"clearActorDoneData\",\n            exit: [\"stopSignOutActor\", \"clearUser\"]\n          }\n        },\n        on: {\n          \"done.invoke.signOutActor\": [{\n            target: \"setup\",\n            cond: \"shouldSetup\"\n          }, {\n            target: \"setup.goToInitialState\"\n          }]\n        }\n      },\n      authenticated: {\n        initial: \"idle\",\n        states: {\n          idle: {\n            on: {\n              TOKEN_REFRESH: \"refreshUser\"\n            }\n          },\n          refreshUser: {\n            invoke: {\n              src: \"getCurrentUser\",\n              onDone: {\n                actions: \"setUser\",\n                target: \"idle\"\n              },\n              onError: {\n                target: \"#authenticator.signOut\"\n              }\n            }\n          }\n        },\n        on: {\n          SIGN_OUT: \"signOut\"\n        }\n      }\n    },\n    on: {\n      CHANGE: {\n        actions: \"forwardToActor\"\n      },\n      BLUR: {\n        actions: \"forwardToActor\"\n      },\n      SUBMIT: {\n        actions: \"forwardToActor\"\n      },\n      FEDERATED_SIGN_IN: {\n        actions: \"forwardToActor\"\n      },\n      RESEND: {\n        actions: \"forwardToActor\"\n      },\n      SIGN_IN: {\n        actions: \"forwardToActor\"\n      },\n      SKIP: {\n        actions: \"forwardToActor\"\n      }\n    }\n  }, {\n    actions: {\n      forwardToActor: s([{\n        cond: \"hasActor\",\n        actions: i(function (t) {\n          return t.actorRef;\n        })\n      }]),\n      setUser: e({\n        user: function (t, o) {\n          return o.data;\n        }\n      }),\n      setActorDoneData: e({\n        actorDoneData: function (o, n) {\n          var r, i;\n          return {\n            authAttributes: t({}, null === (r = n.data) || void 0 === r ? void 0 : r.authAttributes),\n            intent: null === (i = n.data) || void 0 === i ? void 0 : i.intent\n          };\n        },\n        user: function (t, o) {\n          var n;\n          return null === (n = o.data) || void 0 === n ? void 0 : n.user;\n        }\n      }),\n      clearUser: e({\n        user: void 0\n      }),\n      clearActorDoneData: e({\n        actorDoneData: void 0\n      }),\n      applyAmplifyConfig: e({\n        config: function (t, n) {\n          var r,\n            i,\n            e,\n            a,\n            s,\n            c,\n            u,\n            d,\n            l,\n            g = null !== (i = null === (r = n.data.aws_cognito_username_attributes) || void 0 === r ? void 0 : r.map(function (t) {\n              return t.toLowerCase();\n            })) && void 0 !== i ? i : [],\n            v = null !== (a = null === (e = n.data.aws_cognito_verification_mechanisms) || void 0 === e ? void 0 : e.map(function (t) {\n              return t.toLowerCase();\n            })) && void 0 !== a ? a : [],\n            f = null !== (c = null === (s = n.data.aws_cognito_signup_attributes) || void 0 === s ? void 0 : s.map(function (t) {\n              return t.toLowerCase();\n            })) && void 0 !== c ? c : [],\n            A = null !== (d = null === (u = n.data.aws_cognito_social_providers) || void 0 === u ? void 0 : u.map(function (t) {\n              return t.toLowerCase();\n            })) && void 0 !== d ? d : [],\n            w = n.data.aws_cognito_password_protection_settings || {};\n          0 === g.length && g.push(\"username\");\n          var m = t.config,\n            S = m.loginMechanisms,\n            h = m.signUpAttributes,\n            D = m.socialProviders,\n            I = m.initialState;\n          return {\n            loginMechanisms: null != S ? S : g,\n            formFields: null !== (l = p(m.formFields)) && void 0 !== l ? l : {},\n            passwordSettings: w,\n            signUpAttributes: null != h ? h : Array.from(new Set(o(o([], v, !0), f, !0))),\n            socialProviders: null != D ? D : A.sort(),\n            initialState: I\n          };\n        }\n      }),\n      spawnSignInActor: e({\n        actorRef: function (t, o) {\n          var n,\n            r,\n            i,\n            e,\n            s,\n            c,\n            d = t.services,\n            l = u({\n              services: d\n            }).withContext({\n              authAttributes: null !== (r = null === (n = t.actorDoneData) || void 0 === n ? void 0 : n.authAttributes) && void 0 !== r ? r : {},\n              user: t.user,\n              intent: null === (i = t.actorDoneData) || void 0 === i ? void 0 : i.intent,\n              country_code: \"+1\",\n              formValues: {},\n              touched: {},\n              validationError: {},\n              loginMechanisms: null === (e = t.config) || void 0 === e ? void 0 : e.loginMechanisms,\n              socialProviders: null === (s = t.config) || void 0 === s ? void 0 : s.socialProviders,\n              formFields: null === (c = t.config) || void 0 === c ? void 0 : c.formFields\n            });\n          return a(l, {\n            name: \"signInActor\"\n          });\n        }\n      }),\n      spawnSignUpActor: e({\n        actorRef: function (t, o) {\n          var n,\n            r,\n            i,\n            e,\n            s,\n            c,\n            u,\n            d = t.services,\n            l = v({\n              services: d\n            }).withContext({\n              authAttributes: null !== (r = null === (n = t.actorDoneData) || void 0 === n ? void 0 : n.authAttributes) && void 0 !== r ? r : {},\n              country_code: \"+1\",\n              intent: null === (i = t.actorDoneData) || void 0 === i ? void 0 : i.intent,\n              formValues: {},\n              touched: {},\n              validationError: {},\n              loginMechanisms: null === (e = t.config) || void 0 === e ? void 0 : e.loginMechanisms,\n              socialProviders: null === (s = t.config) || void 0 === s ? void 0 : s.socialProviders,\n              formFields: null === (c = t.config) || void 0 === c ? void 0 : c.formFields,\n              passwordSettings: null === (u = t.config) || void 0 === u ? void 0 : u.passwordSettings\n            });\n          return a(l, {\n            name: \"signUpActor\"\n          });\n        }\n      }),\n      spawnResetPasswordActor: e({\n        actorRef: function (t, o) {\n          var n,\n            r,\n            i,\n            e,\n            s = t.services,\n            c = l({\n              services: s\n            }).withContext({\n              formValues: {},\n              touched: {},\n              intent: null === (n = t.actorDoneData) || void 0 === n ? void 0 : n.intent,\n              username: null === (i = null === (r = t.actorDoneData) || void 0 === r ? void 0 : r.authAttributes) || void 0 === i ? void 0 : i.username,\n              formFields: null === (e = t.config) || void 0 === e ? void 0 : e.formFields,\n              validationError: {}\n            });\n          return a(c, {\n            name: \"resetPasswordActor\"\n          });\n        }\n      }),\n      spawnSignOutActor: e({\n        actorRef: function (t) {\n          var o = d.withContext({\n            user: t.user\n          });\n          return a(o, {\n            name: \"signOutActor\"\n          });\n        }\n      }),\n      stopSignInActor: c(\"signInActor\"),\n      stopSignUpActor: c(\"signUpActor\"),\n      stopResetPasswordActor: c(\"resetPasswordActor\"),\n      stopSignOutActor: c(\"signOutActor\"),\n      configure: e(function (o, r) {\n        var i = r.data,\n          e = i.services,\n          a = n(i, [\"services\"]);\n        return {\n          services: t(t({}, g), e),\n          config: a\n        };\n      }),\n      setHasSetup: e({\n        hasSetup: !0\n      })\n    },\n    guards: {\n      isInitialStateSignUp: function (t) {\n        return \"signUp\" === t.config.initialState;\n      },\n      isInitialStateResetPassword: function (t) {\n        return \"resetPassword\" === t.config.initialState;\n      },\n      shouldRedirectToSignUp: function (t, o) {\n        var n;\n        return \"confirmSignUp\" === (null === (n = o.data) || void 0 === n ? void 0 : n.intent);\n      },\n      shouldRedirectToResetPassword: function (t, o) {\n        var n;\n        return \"confirmPasswordReset\" === (null === (n = o.data) || void 0 === n ? void 0 : n.intent);\n      },\n      shouldAutoSignIn: function (t, o) {\n        var n;\n        return \"autoSignIn\" === (null === (n = o.data) || void 0 === n ? void 0 : n.intent);\n      },\n      shouldSetup: function (t) {\n        return !1 === t.hasSetup;\n      },\n      hasActor: function (t) {\n        return !!t.actorRef;\n      }\n    },\n    services: {\n      getCurrentUser: function (t, o) {\n        return t.services.getCurrentUser();\n      },\n      getAmplifyConfig: function (t, o) {\n        return t.services.getAmplifyConfig();\n      }\n    }\n  });\n}\nfunction p(t) {\n  return t && Object.keys(t).forEach(function (o) {\n    Object.keys(t[o]).forEach(function (n) {\n      var r = t[o][n];\n      r.required = r.isRequired;\n    });\n  }), t;\n}\nexport { f as createAuthenticatorMachine };","map":null,"metadata":{},"sourceType":"module"}
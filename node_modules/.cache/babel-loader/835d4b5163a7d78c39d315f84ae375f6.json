{"ast":null,"code":"import { __rest as e } from \"tslib\";\nimport o from \"classnames\";\nimport * as i from \"react\";\nimport { ComponentClassNames as a } from \"../shared/constants.js\";\nimport { FieldClearButton as r } from \"../Field/FieldClearButton.js\";\nimport \"../Field/FieldDescription.js\";\nimport \"../Field/FieldErrorMessage.js\";\nimport { strHasLength as t } from \"../shared/utils.js\";\nimport { SearchFieldButton as l } from \"./SearchFieldButton.js\";\nimport { TextField as n } from \"../TextField/TextField.js\";\nimport { useSearchField as s } from \"./useSearchField.js\";\nconst m = i.forwardRef((m, d) => {\n  var {\n      autoComplete: c = \"off\",\n      className: p,\n      isDisabled: u,\n      clearButtonLabel: f,\n      labelHidden: b = !0,\n      name: C = \"q\",\n      onSubmit: F,\n      onClear: j,\n      searchButtonRef: h,\n      size: D\n    } = m,\n    S = e(m, [\"autoComplete\", \"className\", \"isDisabled\", \"clearButtonLabel\", \"labelHidden\", \"name\", \"onSubmit\", \"onClear\", \"searchButtonRef\", \"size\"]);\n  const {\n    value: B,\n    onClearHandler: E,\n    onInput: x,\n    onKeyDown: z,\n    onClick: R,\n    composedRefs: k\n  } = s({\n    onSubmit: F,\n    onClear: j,\n    externalRef: d\n  });\n  return i.createElement(n, Object.assign({\n    autoComplete: c,\n    className: o(a.SearchField, p),\n    labelHidden: b,\n    innerEndComponent: i.createElement(r, {\n      ariaLabel: f,\n      excludeFromTabOrder: !0,\n      isVisible: t(B),\n      onClick: E,\n      size: D,\n      variation: \"link\"\n    }),\n    isDisabled: u,\n    isMultiline: !1,\n    name: C,\n    onInput: x,\n    onKeyDown: z,\n    outerEndComponent: i.createElement(l, {\n      isDisabled: u,\n      onClick: R,\n      ref: h,\n      size: D\n    }),\n    ref: k,\n    size: D,\n    value: B\n  }, S));\n});\nm.displayName = \"SearchField\";\nexport { m as SearchField };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __rest as s } from \"tslib\";\nimport e from \"classnames\";\nimport * as o from \"react\";\nimport { ComponentClassNames as a } from \"../shared/constants.js\";\nimport { ShowPasswordButton as t } from \"./ShowPasswordButton.js\";\nimport { TextField as r } from \"../TextField/TextField.js\";\nconst l = o.forwardRef((l, d) => {\n  var {\n      autoComplete: w = \"current-password\",\n      label: n,\n      className: i,\n      hideShowPassword: p = !1,\n      passwordIsHiddenLabel: m,\n      passwordIsShownLabel: u,\n      showPasswordButtonLabel: b,\n      showPasswordButtonRef: c,\n      size: h\n    } = l,\n    f = s(l, [\"autoComplete\", \"label\", \"className\", \"hideShowPassword\", \"passwordIsHiddenLabel\", \"passwordIsShownLabel\", \"showPasswordButtonLabel\", \"showPasswordButtonRef\", \"size\"]);\n  const [P, L] = o.useState(\"password\"),\n    S = o.useCallback(() => {\n      L(\"password\" === P ? \"text\" : \"password\");\n    }, [L, P]);\n  return o.createElement(r, Object.assign({\n    autoComplete: w,\n    isMultiline: !1,\n    outerEndComponent: p ? null : o.createElement(t, {\n      fieldType: P,\n      onClick: S,\n      passwordIsHiddenLabel: m,\n      passwordIsShownLabel: u,\n      ref: c,\n      size: h,\n      showPasswordButtonLabel: b\n    }),\n    size: h,\n    type: P,\n    label: n,\n    className: e(a.PasswordField, i),\n    ref: d\n  }, f));\n});\nl.displayName = \"PasswordField\";\nexport { l as PasswordField };","map":null,"metadata":{},"sourceType":"module"}
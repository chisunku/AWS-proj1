{"ast":null,"code":"import { __rest as o } from \"tslib\";\nimport * as n from \"react\";\nimport { ComponentPropsToStylePropsMap as t } from \"../types/style.js\";\nimport { getValueAtCurrentBreakpoint as r } from \"./responsive/utils.js\";\nimport { useBreakpoint as e } from \"./responsive/useBreakpoint.js\";\nimport \"../../components/ThemeProvider/AmplifyContext.js\";\nimport { useTheme as i } from \"../../hooks/useTheme.js\";\nimport { isNullOrEmptyString as a, isEmptyString as p } from \"./utils.js\";\nconst s = o => \"auto\" === o || \"number\" == typeof o && !isNaN(o) || \"string\" == typeof o && !isNaN(parseFloat(o)),\n  l = o => \"auto\" === o ? \"auto\" : `span ${o}`,\n  m = o => {\n    if (s(o)) return l(o);\n    if (Array.isArray(o)) return o.map(o => l(o));\n    if (\"object\" == typeof o && null != o) {\n      const n = {};\n      return Object.entries(o).forEach(_ref => {\n        let [o, t] = _ref;\n        n[o] = l(t);\n      }), n;\n    }\n    return null;\n  },\n  c = t => {\n    const {\n        rowSpan: r,\n        columnSpan: e,\n        row: i,\n        column: p\n      } = t,\n      s = o(t, [\"rowSpan\", \"columnSpan\", \"row\", \"column\"]),\n      {\n        rowFromSpanValue: l,\n        columnFromSpanValue: c\n      } = n.useMemo(() => ({\n        rowFromSpanValue: m(r),\n        columnFromSpanValue: m(e)\n      }), [r, e]);\n    return Object.assign({\n      row: a(i) ? l : i,\n      column: a(p) ? c : p\n    }, s);\n  },\n  g = _ref2 => {\n    let {\n      props: o = {},\n      style: n = {},\n      breakpoint: e,\n      breakpoints: i\n    } = _ref2;\n    const a = {};\n    return Object.keys(o).filter(n => null != o[n]).forEach(s => {\n      if (s in t) {\n        if (!p(o[s])) {\n          const a = o[s],\n            p = t[s];\n          n = Object.assign(Object.assign({}, n), {\n            [p]: r({\n              values: a,\n              breakpoint: e,\n              breakpoints: i,\n              propKey: s\n            })\n          });\n        }\n      } else a[s] = o[s];\n    }), {\n      propStyles: n,\n      nonStyleProps: a\n    };\n  },\n  u = (o, t) => {\n    const {\n        breakpoints: {\n          values: r,\n          defaultBreakpoint: a\n        }\n      } = i(),\n      p = e({\n        breakpoints: r,\n        defaultBreakpoint: a\n      }),\n      s = c(o);\n    return n.useMemo(() => g({\n      props: s,\n      style: t,\n      breakpoint: p,\n      breakpoints: r\n    }), [s, t, r, p]);\n  },\n  d = {\n    alignContent: !0,\n    alignItems: !0,\n    direction: !0,\n    gap: !0,\n    justifyContent: !0,\n    wrap: !0,\n    columnGap: !0,\n    rowGap: !0\n  },\n  f = {\n    alignSelf: !0,\n    area: !0,\n    backgroundColor: !0,\n    backgroundImage: !0,\n    basis: !0,\n    border: !0,\n    borderRadius: !0,\n    bottom: !0,\n    boxShadow: !0,\n    color: !0,\n    column: !0,\n    columnEnd: !0,\n    columnSpan: !0,\n    columnStart: !0,\n    display: !0,\n    flex: !0,\n    fontFamily: !0,\n    fontSize: !0,\n    fontStyle: !0,\n    fontWeight: !0,\n    grow: !0,\n    height: !0,\n    left: !0,\n    letterSpacing: !0,\n    lineHeight: !0,\n    margin: !0,\n    marginBlock: !0,\n    marginBlockEnd: !0,\n    marginBlockStart: !0,\n    marginBottom: !0,\n    marginInline: !0,\n    marginInlineEnd: !0,\n    marginInlineStart: !0,\n    marginLeft: !0,\n    marginRight: !0,\n    marginTop: !0,\n    maxHeight: !0,\n    maxWidth: !0,\n    minHeight: !0,\n    minWidth: !0,\n    opacity: !0,\n    order: !0,\n    overflow: !0,\n    padding: !0,\n    paddingBlock: !0,\n    paddingBlockEnd: !0,\n    paddingBlockStart: !0,\n    paddingBottom: !0,\n    paddingInline: !0,\n    paddingInlineEnd: !0,\n    paddingInlineStart: !0,\n    paddingLeft: !0,\n    paddingRight: !0,\n    paddingTop: !0,\n    position: !0,\n    right: !0,\n    row: !0,\n    rowEnd: !0,\n    rowSpan: !0,\n    rowStart: !0,\n    shrink: !0,\n    textAlign: !0,\n    textDecoration: !0,\n    textTransform: !0,\n    top: !0,\n    transform: !0,\n    transformOrigin: !0,\n    width: !0,\n    whiteSpace: !0\n  },\n  S = o => {\n    const n = {\n      flexContainerStyleProps: {},\n      baseStyleProps: {},\n      rest: {}\n    };\n    return Object.keys(o).forEach(t => {\n      t in d ? n.flexContainerStyleProps[t] = o[t] : t in f ? n.baseStyleProps[t] = o[t] : n.rest[t] = o[t];\n    }), n;\n  };\nexport { m as convertGridSpan, g as convertStylePropsToStyleObj, l as getGridSpan, s as isSpanPrimitiveValue, S as splitPrimitiveProps, u as useStyles, c as useTransformStyleProps };","map":null,"metadata":{},"sourceType":"module"}
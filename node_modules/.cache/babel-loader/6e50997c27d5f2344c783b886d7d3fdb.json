{"ast":null,"code":"import { __rest as s } from \"tslib\";\nimport * as e from \"react\";\nimport { Button as o } from \"../Button/Button.js\";\nimport { VisuallyHidden as r } from \"../VisuallyHidden/VisuallyHidden.js\";\nimport { ComponentClassNames as a, ComponentText as i } from \"../shared/constants.js\";\nimport \"classnames\";\nimport \"../View/View.js\";\nimport { IconVisibilityOff as t } from \"../Icon/icons/IconVisibilityOff.js\";\nimport { IconVisibility as d } from \"../Icon/icons/IconVisibility.js\";\nconst {\n    passwordIsHidden: n,\n    passwordIsShown: l,\n    showPassword: w\n  } = i.PasswordField,\n  m = e.forwardRef((i, m) => {\n    var {\n        fieldType: p,\n        passwordIsHiddenLabel: c = n,\n        passwordIsShownLabel: f = l,\n        showPasswordButtonLabel: b = w,\n        size: h\n      } = i,\n      I = s(i, [\"fieldType\", \"passwordIsHiddenLabel\", \"passwordIsShownLabel\", \"showPasswordButtonLabel\", \"size\"]);\n    return e.createElement(o, Object.assign({\n      \"aria-checked\": \"password\" !== p,\n      ariaLabel: b,\n      className: a.FieldShowPassword,\n      ref: m,\n      role: \"switch\",\n      size: h\n    }, I), e.createElement(r, {\n      \"aria-live\": \"polite\"\n    }, \"password\" === p ? c : f), \"password\" === p ? e.createElement(d, {\n      size: h\n    }) : e.createElement(t, {\n      size: h\n    }));\n  });\nm.displayName = \"ShowPasswordButton\";\nexport { m as ShowPasswordButton };","map":null,"metadata":{},"sourceType":"module"}
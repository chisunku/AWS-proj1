{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar _a;\nimport { Amplify, Hub, Signer, jitteredExponentialRetry, getAmplifyUserAgent } from \"@aws-amplify/core\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { Map as MaplibreMap } from \"maplibre-gl\";\nimport { urlEncodePeriods } from \"./utils\";\n/**\n * An object for encapsulating an Amplify Geo transform request and Amplify credentials\n * @class AmplifyMapLibreRequest\n * @param {ICredentials} currentCredentials Amplify credentials used for signing transformRequests\n * @param {String} region AWS region\n * @return {AmplifyMapLibreRequest} `this`\n *\n */\nexport default class AmplifyMapLibreRequest {\n  constructor(currentCredentials, region) {\n    this.refreshCredentials = () => __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.credentials = yield Amplify.Auth.currentCredentials();\n      } catch (e) {\n        console.error(`Failed to refresh credentials: ${e}`);\n        throw e;\n      }\n    });\n    this.refreshCredentialsWithRetry = () => __awaiter(this, void 0, void 0, function* () {\n      try {\n        const MAX_DELAY_MS = 5 * 60 * 1000; // 5 minutes\n        yield jitteredExponentialRetry(this.refreshCredentials, [], MAX_DELAY_MS);\n        // Refresh credentials on a timer because HubEvents do not trigger on credential refresh currently\n        this.activeTimeout && clearTimeout(this.activeTimeout);\n        const expiration = new Date(this.credentials.expiration);\n        const timeout = expiration.getTime() - new Date().getTime() - 10000; // Adds a 10 second buffer time before the next refresh\n        this.activeTimeout = window.setTimeout(this.refreshCredentialsWithRetry, timeout);\n      } catch (e) {\n        console.error(`Failed to refresh credentials: ${e}`);\n      }\n    });\n    /**\n     * A callback function that can be passed to a maplibre map object that is run before the map makes a request for an external URL. This transform request is used to sign the request with AWS Sigv4 Auth. [https://maplibre.org/maplibre-gl-js-docs/api/map/](https://maplibre.org/maplibre-gl-js-docs/api/map/)\n     * @param {string} url The function to use as a render function. This function accepts a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and returns a string.\n     * @param {string} resourceType The function to use as a render function. This function accepts a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and returns a string.\n     * @returns {RequestParameters} [https://maplibre.org/maplibre-gl-js-docs/api/properties/#requestparameters](https://maplibre.org/maplibre-gl-js-docs/api/properties/#requestparameters)\n     */\n    this.transformRequest = (url, resourceType) => {\n      if (resourceType === \"Style\" && !url.includes(\"://\")) {\n        if (this.region == undefined) {\n          throw new Error(\"AWS region for map is undefined. Please verify that the region is set in aws-exports.js or that you are providing an AWS region parameter to createMap\");\n        }\n        url = `https://maps.geo.${this.region}.amazonaws.com/maps/v0/maps/${url}/style-descriptor`;\n      }\n      if (url.includes(\"amazonaws.com\")) {\n        // only sign AWS requests (with the signature as part of the query string)\n        const urlWithUserAgent = url + `?x-amz-user-agent=${encodeURIComponent(urlEncodePeriods(getAmplifyUserAgent()))}`;\n        return {\n          url: Signer.signUrl(urlWithUserAgent, {\n            access_key: this.credentials.accessKeyId,\n            secret_key: this.credentials.secretAccessKey,\n            session_token: this.credentials.sessionToken\n          })\n        };\n      }\n    };\n    this.credentials = currentCredentials;\n    this.region = region;\n    this.activeTimeout = null;\n    this.refreshCredentialsWithRetry();\n    Hub.listen(\"auth\", data => {\n      switch (data.payload.event) {\n        case \"signIn\":\n        case \"signOut\":\n        case \"tokenRefresh\":\n          this.refreshCredentialsWithRetry();\n          break;\n      }\n    });\n  }\n}\n_a = AmplifyMapLibreRequest;\nAmplifyMapLibreRequest.createMapLibreMap = options => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n      region,\n      mapConstructor = MaplibreMap\n    } = options,\n    maplibreOption = __rest(options, [\"region\", \"mapConstructor\"]);\n  const defaultMap = Geo.getDefaultMap();\n  const amplifyRequest = new AmplifyMapLibreRequest(yield Amplify.Auth.currentCredentials(), region || defaultMap.region);\n  const transformRequest = amplifyRequest.transformRequest;\n  const map = new mapConstructor(Object.assign(Object.assign({}, maplibreOption), {\n    style: options.style || defaultMap.mapName,\n    // Amplify uses the name of the map in the maplibre style field,\n    transformRequest\n  }));\n  return map;\n});\nexport const createMap = options => __awaiter(void 0, void 0, void 0, function* () {\n  return AmplifyMapLibreRequest.createMapLibreMap(options);\n});","map":null,"metadata":{},"sourceType":"module"}
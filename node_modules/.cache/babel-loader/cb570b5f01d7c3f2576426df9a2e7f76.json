{"ast":null,"code":"import { __awaiter as e, __generator as t, __assign as r, __rest as n } from \"tslib\";\nimport { Auth as i } from \"aws-amplify\";\nimport o from \"lodash/get\";\nimport s from \"lodash/isEmpty\";\nimport { createMachine as a, sendUpdate as c } from \"xstate\";\nimport { runValidators as d } from \"../../../validators/index.js\";\nimport { clearAttributeToVerify as u, clearChallengeName as l, clearRequiredAttributes as g, clearError as f, clearFormValues as m, clearTouched as h, clearUnverifiedContactMethods as p, clearValidationError as v, handleInput as I, handleSubmit as A, handleBlur as U, parsePhoneNumber as E, setChallengeName as S, setConfirmResetPasswordIntent as b, setConfirmSignUpIntent as C, setRequiredAttributes as y, setCredentials as T, setFieldErrors as w, setRemoteError as N, setUnverifiedContactMethods as R, setUser as P, setUsernameAuthAttributes as V } from \"../actions.js\";\nimport { defaultServices as F } from \"../defaultServices.js\";\nvar _ = [\"SMS_MFA\", \"SOFTWARE_TOKEN_MFA\"],\n  k = function (e) {\n    return o(e, \"data.challengeName\");\n  },\n  D = function (e, t) {\n    return e === t;\n  },\n  M = function (e) {\n    return _.includes(e);\n  };\nfunction j(o) {\n  var _ = o.services;\n  return a({\n    initial: \"init\",\n    id: \"signInActor\",\n    predictableActionArguments: !0,\n    states: {\n      init: {\n        always: [{\n          target: \"autoSignIn\",\n          cond: \"shouldAutoSignIn\"\n        }, {\n          target: \"signIn\"\n        }]\n      },\n      signIn: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              CHANGE: {\n                actions: \"handleInput\"\n              },\n              FEDERATED_SIGN_IN: \"federatedSignIn\"\n            }\n          },\n          federatedSignIn: {\n            tags: [\"pending\"],\n            entry: [\"sendUpdate\", \"clearError\"],\n            invoke: {\n              src: \"federatedSignIn\",\n              onError: {\n                actions: \"setRemoteError\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"parsePhoneNumber\", \"clearError\", \"sendUpdate\"],\n            invoke: {\n              src: \"signIn\",\n              onDone: [{\n                cond: \"shouldSetupTOTP\",\n                actions: [\"setUser\", \"setChallengeName\"],\n                target: \"#signInActor.setupTOTP\"\n              }, {\n                cond: \"shouldConfirmSignIn\",\n                actions: [\"setUser\", \"setChallengeName\"],\n                target: \"#signInActor.confirmSignIn\"\n              }, {\n                cond: \"shouldForceChangePassword\",\n                actions: [\"setUser\", \"setChallengeName\", \"setRequiredAttributes\"],\n                target: \"#signInActor.forceNewPassword\"\n              }, {\n                actions: \"setUser\",\n                target: \"verifying\"\n              }],\n              onError: [{\n                cond: \"shouldRedirectToConfirmSignUp\",\n                actions: [\"setCredentials\", \"setConfirmSignUpIntent\"],\n                target: \"rejected\"\n              }, {\n                cond: \"shouldRedirectToConfirmResetPassword\",\n                actions: [\"setUsernameAuthAttributes\", \"setConfirmResetPasswordIntent\"],\n                target: \"rejected\"\n              }, {\n                actions: \"setRemoteError\",\n                target: \"edit\"\n              }]\n            }\n          },\n          verifying: {\n            tags: [\"pending\"],\n            entry: [\"clearError\", \"sendUpdate\"],\n            invoke: {\n              src: \"checkVerifiedContact\",\n              onDone: [{\n                cond: \"shouldRequestVerification\",\n                target: \"#signInActor.verifyUser\",\n                actions: \"setUnverifiedContactMethods\"\n              }, {\n                target: \"resolved\"\n              }],\n              onError: {\n                actions: \"setRemoteError\",\n                target: \"edit\"\n              }\n            }\n          },\n          resolved: {\n            always: \"#signInActor.resolved\"\n          },\n          rejected: {\n            always: \"#signInActor.rejected\"\n          }\n        }\n      },\n      autoSignIn: {\n        initial: \"submit\",\n        states: {\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"clearError\", \"sendUpdate\"],\n            invoke: {\n              src: \"signIn\",\n              onDone: [{\n                cond: \"shouldSetupTOTP\",\n                actions: [\"setUser\", \"setChallengeName\"],\n                target: \"#signInActor.setupTOTP\"\n              }, {\n                cond: \"shouldConfirmSignIn\",\n                actions: [\"setUser\", \"setChallengeName\"],\n                target: \"#signInActor.confirmSignIn\"\n              }, {\n                cond: \"shouldForceChangePassword\",\n                actions: [\"setUser\", \"setChallengeName\", \"setRequiredAttributes\"],\n                target: \"#signInActor.forceNewPassword\"\n              }, {\n                actions: \"setUser\",\n                target: \"#signInActor.resolved\"\n              }],\n              onError: [{\n                cond: \"shouldRedirectToConfirmSignUp\",\n                actions: [\"setCredentials\", \"setConfirmSignUpIntent\"],\n                target: \"#signInActor.rejected\"\n              }, {\n                cond: \"shouldRedirectToConfirmResetPassword\",\n                actions: [\"setUsernameAuthAttributes\", \"setConfirmResetPasswordIntent\"],\n                target: \"#signInActor.rejected\"\n              }, {\n                actions: \"setRemoteError\",\n                target: \"#signInActor.signIn\"\n              }]\n            }\n          }\n        }\n      },\n      confirmSignIn: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              SIGN_IN: \"#signInActor.signIn\",\n              CHANGE: {\n                actions: \"handleInput\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"clearError\", \"sendUpdate\"],\n            invoke: {\n              src: \"confirmSignIn\",\n              onDone: {\n                target: \"#signInActor.resolved\",\n                actions: [\"setUser\", \"clearChallengeName\", \"clearRequiredAttributes\"]\n              },\n              onError: {\n                target: \"edit\",\n                actions: \"setRemoteError\"\n              }\n            }\n          }\n        }\n      },\n      forceNewPassword: {\n        type: \"parallel\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          validation: {\n            initial: \"pending\",\n            states: {\n              pending: {\n                invoke: {\n                  src: \"validateFields\",\n                  onDone: {\n                    target: \"valid\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"invalid\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              valid: {\n                entry: \"sendUpdate\"\n              },\n              invalid: {\n                entry: \"sendUpdate\"\n              }\n            },\n            on: {\n              SIGN_IN: \"#signInActor.signIn\",\n              CHANGE: {\n                actions: \"handleInput\",\n                target: \".pending\"\n              },\n              BLUR: {\n                actions: \"handleBlur\",\n                target: \".pending\"\n              }\n            }\n          },\n          submit: {\n            initial: \"idle\",\n            entry: \"clearError\",\n            states: {\n              idle: {\n                entry: \"sendUpdate\",\n                on: {\n                  SUBMIT: {\n                    actions: \"handleSubmit\",\n                    target: \"validate\"\n                  }\n                }\n              },\n              validate: {\n                entry: \"sendUpdate\",\n                invoke: {\n                  src: \"validateFields\",\n                  onDone: {\n                    target: \"pending\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              pending: {\n                tags: [\"pending\"],\n                entry: [\"sendUpdate\", \"clearError\"],\n                invoke: {\n                  src: \"forceNewPassword\",\n                  onDone: [{\n                    cond: \"shouldConfirmSignIn\",\n                    actions: [\"setUser\", \"setChallengeName\"],\n                    target: \"#signInActor.confirmSignIn\"\n                  }, {\n                    cond: \"shouldSetupTOTP\",\n                    actions: [\"setUser\", \"setChallengeName\"],\n                    target: \"#signInActor.setupTOTP\"\n                  }, {\n                    target: \"resolved\",\n                    actions: [\"setUser\", \"setCredentials\"]\n                  }],\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setRemoteError\"\n                  }\n                }\n              },\n              resolved: {\n                type: \"final\",\n                always: \"#signInActor.resolved\"\n              }\n            }\n          }\n        }\n      },\n      setupTOTP: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              SIGN_IN: \"#signInActor.signIn\",\n              CHANGE: {\n                actions: \"handleInput\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"sendUpdate\", \"clearError\"],\n            invoke: {\n              src: \"verifyTotpToken\",\n              onDone: {\n                actions: [\"clearChallengeName\", \"clearRequiredAttributes\"],\n                target: \"#signInActor.resolved\"\n              },\n              onError: {\n                actions: \"setRemoteError\",\n                target: \"edit\"\n              }\n            }\n          }\n        }\n      },\n      verifyUser: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              SKIP: \"#signInActor.resolved\",\n              CHANGE: {\n                actions: \"handleInput\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: \"clearError\",\n            invoke: {\n              src: \"verifyUser\",\n              onDone: {\n                target: \"#signInActor.confirmVerifyUser\"\n              },\n              onError: {\n                actions: \"setRemoteError\",\n                target: \"edit\"\n              }\n            }\n          }\n        }\n      },\n      confirmVerifyUser: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearUnverifiedContactMethods\", \"clearAttributeToVerify\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              SKIP: \"#signInActor.resolved\",\n              CHANGE: {\n                actions: \"handleInput\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: \"clearError\",\n            invoke: {\n              src: \"confirmVerifyUser\",\n              onDone: {\n                target: \"#signInActor.resolved\"\n              },\n              onError: {\n                actions: \"setRemoteError\",\n                target: \"edit\"\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: \"final\",\n        data: function (e) {\n          return {\n            user: e.user\n          };\n        }\n      },\n      rejected: {\n        type: \"final\",\n        data: function (e, t) {\n          return {\n            intent: e.redirectIntent,\n            authAttributes: e.authAttributes\n          };\n        }\n      }\n    }\n  }, {\n    actions: {\n      clearAttributeToVerify: u,\n      clearChallengeName: l,\n      clearRequiredAttributes: g,\n      clearError: f,\n      clearFormValues: m,\n      clearTouched: h,\n      clearUnverifiedContactMethods: p,\n      clearValidationError: v,\n      handleInput: I,\n      handleSubmit: A,\n      handleBlur: U,\n      parsePhoneNumber: E,\n      setChallengeName: S,\n      setConfirmResetPasswordIntent: b,\n      setConfirmSignUpIntent: C,\n      setRequiredAttributes: y,\n      setCredentials: T,\n      setFieldErrors: w,\n      setRemoteError: N,\n      setUnverifiedContactMethods: R,\n      setUser: P,\n      setUsernameAuthAttributes: V,\n      sendUpdate: c()\n    },\n    guards: {\n      shouldConfirmSignIn: function (e, t) {\n        return M(k(t));\n      },\n      shouldAutoSignIn: function (e) {\n        return \"autoSignIn\" === (null == e ? void 0 : e.intent);\n      },\n      shouldRedirectToConfirmSignUp: function (e, t) {\n        return \"UserNotConfirmedException\" === t.data.code;\n      },\n      shouldRedirectToConfirmResetPassword: function (e, t) {\n        return \"PasswordResetRequiredException\" === t.data.code;\n      },\n      shouldSetupTOTP: function (e, t) {\n        return D(k(t), \"MFA_SETUP\");\n      },\n      shouldForceChangePassword: function (e, t) {\n        return D(k(t), \"NEW_PASSWORD_REQUIRED\");\n      },\n      shouldRequestVerification: function (e, t) {\n        var r = t.data,\n          n = r.unverified,\n          i = r.verified;\n        return s(i) && !s(n);\n      }\n    },\n    services: {\n      signIn: function (n) {\n        return e(this, void 0, void 0, function () {\n          var e, i, o, s, a, c, d;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = n.authAttributes, i = void 0 === e ? {} : e, o = n.formValues, s = void 0 === o ? {} : o, a = r(r({}, i), s), c = a.username, d = a.password, [4, _.handleSignIn({\n                  username: c,\n                  password: d\n                })];\n              case 1:\n                return [2, t.sent()];\n            }\n          });\n        });\n      },\n      confirmSignIn: function (r) {\n        return e(this, void 0, void 0, function () {\n          var e, n, o, s;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = r.challengeName, n = r.user, o = r.formValues.confirmation_code, s = M(e) ? e : void 0, [4, _.handleConfirmSignIn({\n                  user: n,\n                  code: o,\n                  mfaType: s\n                })];\n              case 1:\n                return t.sent(), [4, i.currentAuthenticatedUser()];\n              case 2:\n                return [2, t.sent()];\n            }\n          });\n        });\n      },\n      forceNewPassword: function (o) {\n        return e(this, void 0, void 0, function () {\n          var e, s, a, c, d, u, l, g, f;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                e = o.user, s = o.formValues, a = s.password, s.confirm_password, c = s.phone_number, d = s.country_code, u = n(s, [\"password\", \"confirm_password\", \"phone_number\", \"country_code\"]), c && (l = \"\".concat(d).concat(c).replace(/[^A-Z0-9+]/gi, \"\"), u = r(r({}, u), {\n                  phone_number: l\n                })), t.label = 1;\n              case 1:\n                return t.trys.push([1, 3,, 4]), [4, i.completeNewPassword(e, a, u)];\n              case 2:\n                return (g = t.sent()).challengeName ? [2, g] : [2, i.currentAuthenticatedUser()];\n              case 3:\n                return f = t.sent(), [2, Promise.reject(f)];\n              case 4:\n                return [2];\n            }\n          });\n        });\n      },\n      verifyTotpToken: function (r) {\n        return e(this, void 0, void 0, function () {\n          var e, n, o;\n          return t(this, function (t) {\n            return e = r.formValues, n = r.user, o = e.confirmation_code, [2, i.verifyTotpToken(n, o)];\n          });\n        });\n      },\n      federatedSignIn: function (r, n) {\n        return e(this, void 0, void 0, function () {\n          var e;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = n.data.provider, [4, i.federatedSignIn({\n                  provider: e\n                })];\n              case 1:\n                return [2, t.sent()];\n            }\n          });\n        });\n      },\n      checkVerifiedContact: function (r) {\n        return e(this, void 0, void 0, function () {\n          var e;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = r.user, [4, i.verifiedContact(e)];\n              case 1:\n                return [2, t.sent()];\n            }\n          });\n        });\n      },\n      verifyUser: function (r) {\n        return e(this, void 0, void 0, function () {\n          var e, n;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = r.formValues.unverifiedAttr, [4, i.verifyCurrentUserAttribute(e)];\n              case 1:\n                return n = t.sent(), r.attributeToVerify = e, [2, n];\n            }\n          });\n        });\n      },\n      confirmVerifyUser: function (r) {\n        return e(this, void 0, void 0, function () {\n          var e, n;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = r.attributeToVerify, n = r.formValues.confirmation_code, [4, i.verifyCurrentUserAttributeSubmit(e, n)];\n              case 1:\n                return [2, t.sent()];\n            }\n          });\n        });\n      },\n      validateFields: function (r) {\n        return e(this, void 0, void 0, function () {\n          return t(this, function (e) {\n            return [2, d(r.formValues, r.touched, r.passwordSettings, [F.validateConfirmPassword])];\n          });\n        });\n      }\n    }\n  });\n}\nexport { j as signInActor };","map":null,"metadata":{},"sourceType":"module"}
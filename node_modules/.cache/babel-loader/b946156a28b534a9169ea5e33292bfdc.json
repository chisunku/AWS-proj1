{"ast":null,"code":"import { __rest as e } from \"tslib\";\nimport * as t from \"react\";\nimport i from \"classnames\";\nimport { useStepper as r } from \"./useStepper.js\";\nimport \"../Field/FieldClearButton.js\";\nimport { FieldDescription as a } from \"../Field/FieldDescription.js\";\nimport { FieldErrorMessage as s } from \"../Field/FieldErrorMessage.js\";\nimport { FieldGroup as o } from \"../FieldGroup/FieldGroup.js\";\nimport \"../FieldGroupIcon/FieldGroupIcon.js\";\nimport { FieldGroupIconButton as l } from \"../FieldGroupIcon/FieldGroupIconButton.js\";\nimport { Flex as n } from \"../Flex/Flex.js\";\nimport { IconAdd as d } from \"../Icon/icons/IconAdd.js\";\nimport { ComponentClassNames as p, ComponentText as c } from \"../shared/constants.js\";\nimport \"../View/View.js\";\nimport { IconRemove as m } from \"../Icon/icons/IconRemove.js\";\nimport { Input as u } from \"../Input/Input.js\";\nimport { Label as b } from \"../Label/Label.js\";\nimport { classNameModifier as h, classNameModifierByFlag as f } from \"../shared/utils.js\";\nimport { splitPrimitiveProps as F } from \"../shared/styleUtils.js\";\nimport { useStableId as I } from \"../utils/useStableId.js\";\nconst g = \"decrease-icon\",\n  j = \"increase-icon\",\n  B = t.forwardRef((g, j) => {\n    const {\n        className: B,\n        descriptiveText: S,\n        defaultValue: v,\n        errorMessage: E,\n        hasError: D = !1,\n        id: y,\n        isDisabled: C,\n        isReadOnly: L,\n        isRequired: O,\n        increaseButtonLabel: R = c.StepperField.increaseButtonLabel,\n        decreaseButtonLabel: x = c.StepperField.decreaseButtonLabel,\n        label: N,\n        labelHidden: w = !1,\n        onStepChange: z,\n        size: G,\n        variation: V,\n        testId: H,\n        bottom: M,\n        height: $,\n        left: q,\n        padding: T,\n        position: k,\n        right: P,\n        top: W,\n        width: A,\n        value: U\n      } = g,\n      J = e(g, [\"className\", \"descriptiveText\", \"defaultValue\", \"errorMessage\", \"hasError\", \"id\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"increaseButtonLabel\", \"decreaseButtonLabel\", \"label\", \"labelHidden\", \"onStepChange\", \"size\", \"variation\", \"testId\", \"bottom\", \"height\", \"left\", \"padding\", \"position\", \"right\", \"top\", \"width\", \"value\"]),\n      K = I(y),\n      Q = I(),\n      X = S ? Q : void 0,\n      {\n        baseStyleProps: Y,\n        flexContainerStyleProps: Z,\n        rest: _\n      } = F(J),\n      {\n        step: ee,\n        value: te,\n        inputValue: ie,\n        handleDecrease: re,\n        handleIncrease: ae,\n        handleOnBlur: se,\n        handleOnChange: oe,\n        handleOnWheel: le,\n        setInputValue: ne,\n        shouldDisableDecreaseButton: de,\n        shouldDisableIncreaseButton: pe\n      } = r(g);\n    return t.useEffect(() => {\n      void 0 !== U && ne(U);\n    }, [U, ne]), t.createElement(n, Object.assign({\n      className: i(p.Field, h(p.Field, G), p.StepperField, B),\n      \"data-size\": G,\n      \"data-variation\": V,\n      testId: H,\n      width: A,\n      height: $,\n      position: k,\n      padding: T,\n      top: W,\n      right: P,\n      left: q,\n      bottom: M\n    }, Z), t.createElement(b, {\n      htmlFor: K,\n      visuallyHidden: w\n    }, N), t.createElement(a, {\n      id: Q,\n      labelHidden: w,\n      descriptiveText: S\n    }), t.createElement(o, {\n      outerStartComponent: t.createElement(l, {\n        \"aria-controls\": K,\n        ariaLabel: `${x} ${te - ee}`,\n        className: i(p.StepperFieldButtonDecrease, h(p.StepperFieldButtonDecrease, V), f(p.StepperFieldButtonDecrease, \"disabled\", de)),\n        \"data-invalid\": D,\n        isDisabled: de,\n        onClick: re,\n        size: G\n      }, t.createElement(m, {\n        \"data-testid\": \"decrease-icon\"\n      })),\n      outerEndComponent: t.createElement(l, {\n        \"aria-controls\": K,\n        ariaLabel: `${R} ${te + ee}`,\n        className: i(p.StepperFieldButtonIncrease, h(p.StepperFieldButtonIncrease, V), f(p.StepperFieldButtonIncrease, \"disabled\", pe)),\n        \"data-invalid\": D,\n        isDisabled: pe,\n        onClick: ae,\n        size: G\n      }, t.createElement(d, {\n        \"data-testid\": \"increase-icon\"\n      }))\n    }, t.createElement(u, Object.assign({\n      \"aria-describedby\": X,\n      className: p.StepperFieldInput,\n      hasError: D,\n      id: K,\n      isDisabled: C,\n      isReadOnly: L,\n      isRequired: O,\n      onBlur: se,\n      onChange: oe,\n      onWheel: le,\n      ref: j,\n      size: G,\n      variation: V,\n      type: \"number\",\n      value: ie\n    }, Y, _))), t.createElement(s, {\n      hasError: D,\n      errorMessage: E\n    }));\n  });\nB.displayName = \"StepperField\";\nexport { g as DECREASE_ICON, j as INCREASE_ICON, B as StepperField };","map":null,"metadata":{},"sourceType":"module"}
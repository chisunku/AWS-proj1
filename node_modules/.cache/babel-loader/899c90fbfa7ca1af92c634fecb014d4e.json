{"ast":null,"code":"import { __rest as e } from \"tslib\";\nimport * as t from \"react\";\nimport a from \"classnames\";\nimport { Flex as s } from \"../Flex/Flex.js\";\nimport { ComponentClassNames as o } from \"../shared/constants.js\";\nimport \"../View/View.js\";\nimport { IconCheck as d } from \"../Icon/icons/IconCheck.js\";\nimport { IconIndeterminate as c } from \"../Icon/icons/IconIndeterminate.js\";\nimport { Input as r } from \"../Input/Input.js\";\nimport { Text as i } from \"../Text/Text.js\";\nimport { VisuallyHidden as n } from \"../VisuallyHidden/VisuallyHidden.js\";\nimport { getTestId as l } from \"../utils/testUtils.js\";\nimport { useStableId as m } from \"../utils/useStableId.js\";\nimport { useCheckbox as b } from \"./useCheckbox.js\";\nimport { splitPrimitiveProps as h } from \"../shared/styleUtils.js\";\nimport { classNameModifierByFlag as u } from \"../shared/utils.js\";\nconst k = t.forwardRef((k, f) => {\n  var {\n      checked: C,\n      className: p,\n      defaultChecked: x,\n      hasError: I,\n      isDisabled: j,\n      isIndeterminate: E,\n      label: y,\n      labelHidden: N,\n      labelPosition: B,\n      onChange: g,\n      testId: F\n    } = k,\n    H = e(k, [\"checked\", \"className\", \"defaultChecked\", \"hasError\", \"isDisabled\", \"isIndeterminate\", \"label\", \"labelHidden\", \"labelPosition\", \"onChange\", \"testId\"]);\n  const {\n      baseStyleProps: V,\n      flexContainerStyleProps: D,\n      rest: P\n    } = h(H),\n    S = void 0 !== C ? C : x,\n    {\n      dataChecked: v,\n      dataFocus: w,\n      onBlur: L,\n      onChange: O,\n      onFocus: T,\n      setDataChecked: U\n    } = b(S, g);\n  t.useEffect(() => {\n    void 0 !== C && C !== v && U(C);\n  }, [C, v, U]);\n  const q = m();\n  t.useEffect(() => {\n    document.querySelector(`[data-id=\"${q}\"]`).indeterminate = E;\n  }, [q, E]);\n  const M = l(F, o.CheckboxButton),\n    R = l(F, o.CheckboxIcon),\n    $ = l(F, o.CheckboxLabel),\n    z = a(o.CheckboxButton, u(o.CheckboxButton, \"disabled\", j), u(o.CheckboxButton, \"error\", I), u(o.CheckboxButton, \"focused\", w)),\n    A = a(o.CheckboxIcon, u(o.CheckboxIcon, \"checked\", v), u(o.CheckboxIcon, \"disabled\", j)),\n    G = t.useMemo(() => E ? t.createElement(c, {\n      className: a(A, u(o.CheckboxIcon, \"indeterminate\", E)),\n      \"data-testid\": R\n    }) : t.createElement(d, {\n      className: A,\n      \"data-checked\": v,\n      \"data-disabled\": j,\n      \"data-testid\": R\n    }), [v, A, R, j, E]);\n  return t.createElement(s, Object.assign({\n    as: \"label\",\n    className: a(o.Checkbox, u(o.Checkbox, \"disabled\", j), p),\n    \"data-disabled\": j,\n    \"data-label-position\": B,\n    testId: F\n  }, V, D), t.createElement(n, null, t.createElement(r, Object.assign({\n    checked: C,\n    className: o.CheckboxInput,\n    \"data-id\": q,\n    defaultChecked: x,\n    isDisabled: j,\n    onBlur: L,\n    onChange: O,\n    onFocus: T,\n    ref: f,\n    type: \"checkbox\"\n  }, P))), y && t.createElement(i, {\n    as: \"span\",\n    className: a(o.CheckboxLabel, {\n      [o.VisuallyHidden]: N\n    }),\n    \"data-disabled\": j,\n    testId: $\n  }, y), t.createElement(s, {\n    \"aria-hidden\": \"true\",\n    as: \"span\",\n    className: z,\n    \"data-checked\": v,\n    \"data-disabled\": j,\n    \"data-focus\": w,\n    \"data-error\": I,\n    testId: M\n  }, G));\n});\nk.displayName = \"Checkbox\";\nexport { k as Checkbox };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __assign as e } from \"tslib\";\nimport { assign as r, stop as n } from \"xstate/lib/actions\";\nvar t = function (e) {\n    return n(e);\n  },\n  o = r({\n    attributeToVerify: function (e) {}\n  }),\n  u = r({\n    challengeName: function (e) {}\n  }),\n  a = r({\n    requiredAttributes: function (e) {}\n  }),\n  i = r({\n    remoteError: function (e) {\n      return \"\";\n    }\n  }),\n  c = r({\n    formValues: function (e) {\n      return {};\n    }\n  }),\n  s = r({\n    touched: function (e) {\n      return {};\n    }\n  }),\n  d = r({\n    unverifiedContactMethods: function (e) {}\n  }),\n  l = r({\n    username: function (e) {}\n  }),\n  f = r({\n    validationError: function (e) {\n      return {};\n    }\n  }),\n  m = r({\n    challengeName: function (e, r) {\n      var n;\n      return null === (n = r.data) || void 0 === n ? void 0 : n.challengeName;\n    }\n  }),\n  v = r({\n    requiredAttributes: function (e, r) {\n      var n, t;\n      return null === (t = null === (n = r.data) || void 0 === n ? void 0 : n.challengeParam) || void 0 === t ? void 0 : t.requiredAttributes;\n    }\n  }),\n  h = r({\n    redirectIntent: function (e) {\n      return \"confirmPasswordReset\";\n    }\n  }),\n  V = r({\n    redirectIntent: function (e) {\n      return \"confirmSignUp\";\n    }\n  }),\n  b = r({\n    authAttributes: function (e, r) {\n      var n,\n        t,\n        o = e.loginMechanisms[0];\n      return {\n        username: null !== (n = e.formValues[o]) && void 0 !== n ? n : e.formValues.username,\n        password: null === (t = e.formValues) || void 0 === t ? void 0 : t.password\n      };\n    }\n  }),\n  p = r({\n    validationError: function (e, r) {\n      return r.data;\n    }\n  }),\n  g = r({\n    remoteError: function (e, r) {\n      var n;\n      return \"NoUserPoolError\" === r.data.name ? \"Configuration error (see console) â€“ please contact the administrator\" : (null === (n = r.data) || void 0 === n ? void 0 : n.message) || r.data;\n    }\n  }),\n  _ = r({\n    unverifiedContactMethods: function (e, r) {\n      return r.data.unverified;\n    }\n  }),\n  y = r({\n    user: function (e, r) {\n      return r.data.user || r.data;\n    }\n  }),\n  A = r({\n    username: function (e, r) {\n      var n = e.formValues,\n        t = n.username,\n        o = n.country_code;\n      return o && (t = \"\".concat(o).concat(t)), t;\n    }\n  }),\n  E = r({\n    codeDeliveryDetails: function (e, r) {\n      return r.data.codeDeliveryDetails;\n    }\n  }),\n  D = r({\n    authAttributes: function (e, r) {\n      return {\n        username: e.formValues.username\n      };\n    }\n  }),\n  M = r({\n    formValues: function (r, n) {\n      var t,\n        o = n.data,\n        u = o.name,\n        a = o.value;\n      return e(e({}, r.formValues), ((t = {})[u] = a, t));\n    }\n  }),\n  N = r({\n    formValues: function (r, n) {\n      return e(e({}, r.formValues), n.data);\n    }\n  }),\n  q = r({\n    touched: function (r, n) {\n      var t,\n        o = n.data.name;\n      return e(e({}, r.touched), ((t = {})[\"\".concat(o)] = !0, t));\n    }\n  }),\n  w = r({\n    formValues: function (r, n) {\n      var t,\n        o,\n        u = r.loginMechanisms[0],\n        a = void 0 === u ? \"username\" : u;\n      if (!r.formValues.phone_number && \"phone_number\" !== a) return r.formValues;\n      var i = r.formValues,\n        c = r.country_code,\n        s = i.phone_number ? \"phone_number\" : \"username\",\n        d = \"\".concat(null !== (o = i.country_code) && void 0 !== o ? o : c).concat(i[s]).replace(/[^A-Z0-9+]/gi, \"\"),\n        l = e(e({}, i), ((t = {})[s] = d, t));\n      return delete l.country_code, l;\n    }\n  });\nexport { o as clearAttributeToVerify, u as clearChallengeName, i as clearError, c as clearFormValues, a as clearRequiredAttributes, s as clearTouched, d as clearUnverifiedContactMethods, l as clearUsername, f as clearValidationError, q as handleBlur, M as handleInput, N as handleSubmit, w as parsePhoneNumber, m as setChallengeName, E as setCodeDeliveryDetails, h as setConfirmResetPasswordIntent, V as setConfirmSignUpIntent, b as setCredentials, p as setFieldErrors, g as setRemoteError, v as setRequiredAttributes, _ as setUnverifiedContactMethods, y as setUser, A as setUsername, D as setUsernameAuthAttributes, t as stopActor };","map":null,"metadata":{},"sourceType":"module"}
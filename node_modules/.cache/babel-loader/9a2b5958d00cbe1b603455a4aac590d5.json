{"ast":null,"code":"import { getFeaturesFromData } from \"./utils\";\nimport { drawClusterLayer } from \"./drawClusterLayer\";\nimport { drawUnclusteredLayer } from \"./drawUnclusteredLayer\";\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n * @param {String} sourceName A user defined name used for determining the maplibre data source and the maplibre layers\n * @param {Coordinate[] | Feature[]} data An array of coordinate data or GeoJSON Features used as the data source for maplibre\n * @param {maplibre-gl-js-Map} map A maplibre-gl-js [map](https://maplibre.org/maplibre-gl-js-docs/api/map/) on which the points will be drawn\n * @param {Object} options An object containing options for changing the styles and features of the points rendered to the map, see the options for more details on available settings\n * @param {String} options.showCluster Determines whether or not points close together should be clustered into a single point\n * @param {String} options.clusterOptions Object for determining cluster options, see [ClusterOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L43) for more details\n * @param {String} options.unclusteredOptions Object for determining unclustered point options, see [UnclusteredOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L8) for more details\n * @param {MAP_STYLE} mapStyle A required parameter that indicates the map style returned from Amazon Location Service. This is used to determine the default fonts to be used with maplibre-gl-js. View existing styles [here](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/constants.ts#L8)\n * @returns {DrawPointsOutput} output An object containing the string id's of the sources and layers used to draw the points to the map. This includes the sourceId, clusterLayerId, clusterSymbolLayerId, unclusteredLayerId.\n * @property {String} sourceId The [source](https://maplibre.org/maplibre-gl-js-docs/api/sources/) used to contain all of the coordinate/feature data\n * @property {String} clusterLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/) used for creating and styling the points that are clustered together\n * @property {String} clusterSymbolLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#symbol) used for creating styling the number that shows the count of points in a cluster\n * @property {String} unclusteredLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers) used for creating and styling the individual points on the map and the popup when clicking on a point\n */\nexport function drawPoints(sourceName, data, map) {\n  let {\n    showCluster = true,\n    clusterOptions = {},\n    unclusteredOptions: unclusteredMarkerOptions = {},\n    autoFit = true\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let mapStyle = arguments.length > 4 ? arguments[4] : undefined;\n  var _a, _b;\n  if (!map || typeof map.addSource !== \"function\" || typeof map.addLayer !== \"function\") {\n    throw new Error(\"Please use a maplibre map\");\n  }\n  /*\n   * Convert data passed in as coordinates into features\n   */\n  const features = getFeaturesFromData(data);\n  /*\n   * Data source for features\n   */\n  const sourceId = sourceName;\n  map.addSource(sourceId, {\n    type: \"geojson\",\n    data: {\n      type: \"FeatureCollection\",\n      features\n    },\n    cluster: showCluster,\n    clusterMaxZoom: (_a = clusterOptions.clusterMaxZoom) !== null && _a !== void 0 ? _a : 14,\n    clusterRadius: (_b = clusterOptions.smCircleSize) !== null && _b !== void 0 ? _b : 60,\n    generateId: true\n  });\n  /*\n   * Draw ui layers for source data\n   */\n  let clusterLayerId, clusterSymbolLayerId;\n  if (showCluster) {\n    ({\n      clusterLayerId,\n      clusterSymbolLayerId\n    } = drawClusterLayer(sourceId, map, clusterOptions, mapStyle));\n  }\n  const {\n    unclusteredLayerId\n  } = drawUnclusteredLayer(sourceId, map, unclusteredMarkerOptions || {});\n  if (autoFit) {\n    const mapBounds = map.getBounds();\n    features.forEach(function (feature) {\n      mapBounds.extend(feature.geometry.coordinates);\n    });\n    map.fitBounds(mapBounds);\n  }\n  // utility function for setting layer visibility to none\n  const hide = () => {\n    map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"none\");\n    if (clusterLayerId) map.setLayoutProperty(clusterLayerId, \"visibility\", \"none\");\n    if (clusterSymbolLayerId) map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"none\");\n  };\n  // utility function for setting layer visibility to visible\n  const show = () => {\n    map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"visible\");\n    if (clusterLayerId) map.setLayoutProperty(clusterLayerId, \"visibility\", \"visible\");\n    if (clusterSymbolLayerId) map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"visible\");\n  };\n  // utility function updating the data source\n  const setData = data => {\n    const features = getFeaturesFromData(data);\n    map.getSource(sourceId).setData({\n      type: \"FeatureCollection\",\n      features\n    });\n  };\n  return {\n    sourceId,\n    unclusteredLayerId,\n    clusterLayerId,\n    clusterSymbolLayerId,\n    setData,\n    show,\n    hide\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Slot as e } from \"@radix-ui/react-slot\";\nimport { useComposedRefs as r } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope as t } from \"@radix-ui/react-context\";\nimport o from \"react\";\nexport function createCollection(c) {\n  const n = c + \"CollectionProvider\",\n    [l, i] = t(n),\n    [f, a] = l(n, {\n      collectionRef: {\n        current: null\n      },\n      itemMap: new Map()\n    }),\n    u = e => {\n      const {\n          scope: r,\n          children: t\n        } = e,\n        c = o.useRef(null),\n        n = o.useRef(new Map()).current; /*#__PURE__*/\n      return o.createElement(f, {\n        scope: r,\n        itemMap: n,\n        collectionRef: c\n      }, t);\n    },\n    m = c + \"CollectionSlot\",\n    s = /*#__PURE__*/o.forwardRef((t, c) => {\n      const {\n          scope: n,\n          children: l\n        } = t,\n        i = a(m, n),\n        f = r(c, i.collectionRef); /*#__PURE__*/\n      return o.createElement(e, {\n        ref: f\n      }, l);\n    }),\n    p = c + \"CollectionItemSlot\",\n    d = \"data-radix-collection-item\",\n    R = /*#__PURE__*/o.forwardRef((t, c) => {\n      const {\n          scope: n,\n          children: l,\n          ...i\n        } = t,\n        f = o.useRef(null),\n        u = r(c, f),\n        m = a(p, n);\n      return o.useEffect(() => (m.itemMap.set(f, {\n        ref: f,\n        ...i\n      }), () => {\n        m.itemMap.delete(f);\n      })), /*#__PURE__*/o.createElement(e, {\n        [d]: \"\",\n        ref: u\n      }, l);\n    });\n  return [{\n    Provider: u,\n    Slot: s,\n    ItemSlot: R\n  }, function (e) {\n    const r = a(c + \"CollectionConsumer\", e);\n    return o.useCallback(() => {\n      const e = r.collectionRef.current;\n      if (!e) return [];\n      const t = Array.from(e.querySelectorAll(`[${d}]`));\n      return Array.from(r.itemMap.values()).sort((e, r) => t.indexOf(e.ref.current) - t.indexOf(r.ref.current));\n    }, [r.collectionRef, r.itemMap]);\n  }, i];\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as e from \"react\";\nimport { isFunction as a } from \"../shared/utils.js\";\nconst t = (e, a, t, l) => {\n    const s = (l - e) % t;\n    return l = l - s + Math.round(s / t) * t, (l = Math.max(e, l)) > a && (l = a - (a - e) % t), l;\n  },\n  l = _ref => {\n    let {\n      defaultValue: l = 0,\n      value: s,\n      step: n = 1,\n      max: u = Number.MAX_SAFE_INTEGER,\n      min: r = Number.MIN_SAFE_INTEGER,\n      isDisabled: o,\n      isReadOnly: c,\n      onDecrease: h,\n      onIncrease: d,\n      onStepChange: i\n    } = _ref;\n    const b = void 0 !== s;\n    u = Math.max(r, u);\n    const [m, p] = e.useState(() => t(r, u, n, l));\n    b && (s = t(r, u, n, s));\n    const C = b ? s : m,\n      I = o || c || C + n > u,\n      N = o || c || C - n < r,\n      [D, E] = e.useState(C),\n      g = e.useCallback(e => {\n        E(e.target.value);\n      }, []),\n      k = e.useCallback(e => {\n        let l = parseFloat(e.target.value);\n        isNaN(l) || (l = t(r, u, n, l), b || p(l), a(i) && i(l), E(l));\n      }, [r, u, n, b, i]),\n      v = e.useCallback(() => {\n        b || p(C + n), a(i) && i(C + n), a(d) && d(), E(C + n);\n      }, [n, C, b, d, i]),\n      M = e.useCallback(() => {\n        b || p(C - n), a(i) && i(C - n), a(h) && h(), E(C - n);\n      }, [n, C, b, h, i]),\n      S = e.useCallback(e => {\n        e.currentTarget.blur();\n      }, []);\n    return {\n      step: n,\n      value: C,\n      inputValue: D,\n      handleDecrease: M,\n      handleIncrease: v,\n      handleOnBlur: k,\n      handleOnChange: g,\n      handleOnWheel: S,\n      setInputValue: E,\n      shouldDisableDecreaseButton: N,\n      shouldDisableIncreaseButton: I\n    };\n  };\nexport { l as useStepper };","map":null,"metadata":{},"sourceType":"module"}
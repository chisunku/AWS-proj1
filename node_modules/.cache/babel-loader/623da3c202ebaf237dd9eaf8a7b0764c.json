{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport maplibregl from \"maplibre-gl\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { drawGeofences } from \"../drawGeofences\";\nimport { isValidGeofenceId, getGeofenceFeatureFromPolygon, getGeofenceFeatureArray, isExistingGeofenceId, getDistanceBetweenCoordinates } from \"../geofenceUtils\";\nimport { GEOFENCE_COLOR, GEOFENCE_BORDER_COLOR } from \"../constants\";\nimport { AmplifyGeofenceControlUI } from \"./ui\";\nimport { AmplifyMapDraw } from \"./AmplifyMapDraw\";\nimport { createElement } from \"../utils\";\nconst FIT_BOUNDS_PADDING = {\n  left: 240\n}; // Default to 240px right now because of the left nav\nexport class AmplifyGeofenceControl {\n  constructor(options) {\n    this._geofenceCollectionId = options === null || options === void 0 ? void 0 : options.geofenceCollectionId;\n    this._loadedGeofences = {};\n    this._displayedGeofences = [];\n    this.changeMode = this.changeMode.bind(this);\n    this.loadInitialGeofences = this.loadInitialGeofences.bind(this);\n    this.loadMoreGeofences = this.loadMoreGeofences.bind(this);\n    this._loadGeofence = this._loadGeofence.bind(this);\n    this.updateInputRadius = this.updateInputRadius.bind(this);\n    this.saveGeofence = this.saveGeofence.bind(this);\n    this.editGeofence = this.editGeofence.bind(this);\n    this.deleteGeofence = this.deleteGeofence.bind(this);\n    this.displayAllGeofences = this.displayAllGeofences.bind(this);\n    this.hideAllGeofences = this.hideAllGeofences.bind(this);\n    this.addEditableGeofence = this.addEditableGeofence.bind(this);\n    this.setEditingModeEnabled = this.setEditingModeEnabled.bind(this);\n    this.displayHighlightedGeofence = this.displayHighlightedGeofence.bind(this);\n    this.hideHighlightedGeofence = this.hideHighlightedGeofence.bind(this);\n    this.displayGeofence = this.displayGeofence.bind(this);\n    this.hideGeofence = this.hideGeofence.bind(this);\n    this.fitGeofence = this.fitGeofence.bind(this);\n    this.fitAllGeofences = this.fitAllGeofences.bind(this);\n  }\n  /**********************************************************************\n   Public Methods for AmplifyGeofenceControl\n   **********************************************************************/\n  getDefaultPosition() {\n    return \"full-screen\";\n  }\n  onRemove() {\n    this._ui.removeElement(this._container);\n  }\n  // Reorders MapLibre canvas class names to fix a mapbox draw bug - https://github.com/mapbox/mapbox-gl-draw/pull/1079\n  reorderMapLibreClassNames() {\n    const mapCanvas = document.getElementsByClassName(\"maplibregl-canvas\").item(0);\n    if (mapCanvas) {\n      mapCanvas.className = \"mapboxgl-canvas maplibregl-canvas\";\n    }\n  }\n  onAdd(map) {\n    this._map = map;\n    this.reorderMapLibreClassNames();\n    this._container = createElement(\"div\", \"geofence-ctrl maplibregl-ctrl\");\n    this._ui = AmplifyGeofenceControlUI(this, this._container);\n    this._amplifyDraw = new AmplifyMapDraw(map, this._ui);\n    this._ui.registerControlPosition(map, \"full-screen\");\n    this._ui.createGeofenceListContainer();\n    // Draw the geofences source to the map so we can update it on geofences load/creation\n    this._map.once(\"load\", function () {\n      // Prevents warnings on multiple re-renders, especially when rendered in react\n      if (this._map.getSource(\"displayedGeofences\")) {\n        return;\n      }\n      this._drawGeofencesOutput = drawGeofences(\"displayedGeofences\", [], this._map, {\n        fillColor: GEOFENCE_COLOR,\n        borderColor: GEOFENCE_BORDER_COLOR,\n        borderOpacity: 1\n      });\n      this._highlightedGeofenceOutput = drawGeofences(\"highlightedGeofence\", [], this._map, {\n        fillColor: GEOFENCE_COLOR,\n        borderColor: GEOFENCE_BORDER_COLOR,\n        borderOpacity: 1,\n        borderWidth: 6\n      });\n      this.loadInitialGeofences();\n      map.addControl(new maplibregl.NavigationControl({\n        showCompass: false\n      }), \"bottom-right\");\n    }.bind(this));\n    this._map.on(\"draw.update\", () => {\n      const coordinates = this._amplifyDraw._mapBoxDraw.getAll().features[0].geometry.coordinates[0];\n      const radius = getDistanceBetweenCoordinates(coordinates[0], coordinates[Math.floor(coordinates.length / 2)]) / 2;\n      this._ui.updateGeofenceRadius(radius.toFixed(2));\n    });\n    return this._container;\n  }\n  createGeofence(geofenceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!geofenceId || geofenceId.length === 0) {\n        this._ui.createAddGeofencePromptError(\"Geofence ID is empty.\");\n        return;\n      }\n      if (!isValidGeofenceId(geofenceId)) {\n        this._ui.createAddGeofencePromptError(\"Geofence ID contains special characters.\");\n        return;\n      }\n      if (isExistingGeofenceId(geofenceId, this._loadedGeofences)) {\n        this._ui.createAddGeofencePromptError(\"Geofence ID already exists.\");\n        return;\n      }\n      return this.saveGeofence(geofenceId);\n    });\n  }\n  saveGeofence(geofenceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const feature = this._amplifyDraw.get(this._editingGeofenceId);\n      const idToSave = geofenceId || this._editingGeofenceId;\n      const response = yield Geo.saveGeofences({\n        geofenceId: idToSave,\n        geometry: {\n          polygon: feature.geometry[\"coordinates\"]\n        }\n      });\n      if (response.errors[0]) {\n        const err = response.errors[0];\n        throw new Error(`There was an error saving geofence with id ${idToSave}: ${err.error.code} - ${err.error.message}`);\n      }\n      const success = response.successes[0];\n      const savedGeofence = {\n        geofenceId: success.geofenceId,\n        geometry: {\n          polygon: feature.geometry[\"coordinates\"]\n        }\n      };\n      // render geofence to the map and add it to the list\n      this._loadGeofence(savedGeofence);\n      this.displayGeofence(savedGeofence.geofenceId);\n      this.setEditingModeEnabled(false);\n      return savedGeofence.geofenceId;\n    });\n  }\n  // Each page loads 100 geofences\n  loadInitialGeofences() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          entries,\n          nextToken\n        } = yield Geo.listGeofences();\n        this._listGeofencesNextToken = nextToken;\n        const loadGeofence = this._loadGeofence;\n        entries.forEach(geofence => loadGeofence(geofence));\n        this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n      } catch (e) {\n        throw new Error(`Error calling listGeofences: ${e}`);\n      }\n    });\n  }\n  loadMoreGeofences() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._listGeofencesNextToken) {\n        try {\n          const {\n            entries,\n            nextToken\n          } = yield Geo.listGeofences({\n            nextToken: this._listGeofencesNextToken\n          });\n          this._listGeofencesNextToken = nextToken;\n          const loadGeofence = this._loadGeofence;\n          entries.forEach(geofence => loadGeofence(geofence));\n          this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n        } catch (e) {\n          throw new Error(`Error calling listGeofences: ${e}`);\n        }\n      }\n    });\n  }\n  editGeofence(geofenceId) {\n    this.setEditingModeEnabled(true);\n    const geofence = this._loadedGeofences[geofenceId];\n    if (!geofence) {\n      throw new Error(`Geofence with id ${geofenceId} does not exist`);\n    }\n    // render in mapboxdraw\n    const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n    const data = Object.assign({\n      id: geofence.geofenceId\n    }, feature);\n    this._amplifyDraw.add(data);\n    this._editingGeofenceId = geofence.geofenceId;\n  }\n  deleteGeofence(geofenceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield Geo.deleteGeofences(geofenceId);\n      if (response.errors[0]) {\n        const err = response.errors[0].error;\n        throw new Error(`There was an error deleting geofence with id ${geofenceId}: ${err.code} - ${err.message}`);\n      }\n      this._ui.removeGeofenceListItem(geofenceId);\n      delete this._loadedGeofences[geofenceId];\n      this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n      this._displayedGeofences = this._displayedGeofences.filter(geofence => geofence.geofenceId !== geofenceId);\n      this._updateDisplayedGeofences();\n      return geofenceId;\n    });\n  }\n  deleteSelectedGeofences() {\n    const idsToDelete = this._displayedGeofences.map(fence => fence.geofenceId);\n    // FIXME: delete geofence api call here\n    idsToDelete.forEach(id => {\n      this._ui.removeGeofenceListItem(id);\n      delete this._loadedGeofences[id];\n    });\n    this._displayedGeofences = [];\n    this._updateDisplayedGeofences();\n  }\n  /**********************************************************************\n   Private methods for CRUD Geofences\n   **********************************************************************/\n  _loadGeofence(geofence) {\n    // If geofence exists remove it from displayed geofences\n    if (this._loadedGeofences[geofence.geofenceId]) {\n      this._displayedGeofences = this._displayedGeofences.filter(fence => fence.geofenceId !== geofence.geofenceId);\n    } else {\n      // If geofence doesn't exist render a new list item for it\n      this._ui.renderListItem(geofence);\n    }\n    this._loadedGeofences[geofence.geofenceId] = geofence;\n    this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n  }\n  displayGeofence(geofenceId) {\n    this._displayedGeofences.push(this._loadedGeofences[geofenceId]);\n    this._updateDisplayedGeofences();\n    this._ui.updateCheckbox(geofenceId, true);\n    this.fitAllGeofences();\n  }\n  displayAllGeofences() {\n    this._displayedGeofences.push(...Object.values(this._loadedGeofences));\n    this._updateDisplayedGeofences();\n    const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n    Array.from(checkboxes).forEach(checkbox => checkbox.checked = this._ui.getCheckboxAllValue());\n    this.fitAllGeofences();\n  }\n  fitGeofence(geofenceId) {\n    const mapBounds = this._map.getBounds();\n    const geofence = this._loadedGeofences[geofenceId];\n    geofence.geometry.polygon[0].forEach(coord => {\n      mapBounds.extend(coord);\n    });\n    this._map.fitBounds(mapBounds, {\n      padding: FIT_BOUNDS_PADDING\n    });\n  }\n  fitAllGeofences() {\n    let shouldFitBounds = false;\n    const mapBounds = this._map.getBounds();\n    this._displayedGeofences.forEach(geofence => {\n      geofence.geometry.polygon[0].forEach(coord => {\n        if (!mapBounds.contains(coord)) {\n          mapBounds.extend(coord);\n          shouldFitBounds = true;\n        }\n      });\n    });\n    if (shouldFitBounds) this._map.fitBounds(mapBounds, {\n      padding: FIT_BOUNDS_PADDING\n    });\n  }\n  hideGeofence(geofenceId) {\n    this._displayedGeofences = this._displayedGeofences.filter(geofence => geofence.geofenceId !== geofenceId);\n    this._updateDisplayedGeofences();\n    this._ui.updateCheckbox(geofenceId, false);\n  }\n  hideAllGeofences() {\n    this._displayedGeofences = [];\n    this._updateDisplayedGeofences();\n    const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n    Array.from(checkboxes).forEach(checkbox => checkbox.checked = this._ui.getCheckboxAllValue());\n  }\n  _updateDisplayedGeofences() {\n    const feature = getGeofenceFeatureArray(this._displayedGeofences);\n    this._drawGeofencesOutput.setData(feature);\n  }\n  displayHighlightedGeofence(geofenceId) {\n    const geofence = this._loadedGeofences[geofenceId];\n    if (!geofence) {\n      console.warn(`Geofence with id ${geofenceId} does not exist`);\n      return;\n    }\n    const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n    this._highlightedGeofenceOutput.setData(feature);\n    this._highlightedGeofenceOutput.show();\n  }\n  hideHighlightedGeofence() {\n    this._highlightedGeofenceOutput.hide();\n  }\n  /**********************************************************************\n   Methods for controlling amplify mapbox draw\n   **********************************************************************/\n  changeMode(mode) {\n    // erase existing mapbox draw content\n    this._amplifyDraw.delete(this._editingGeofenceId);\n    if (mode === \"draw_circle\") {\n      this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId);\n    } else {\n      this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n    }\n  }\n  resetGeofence() {\n    // erase existing mapbox draw content\n    this._amplifyDraw.delete(this._editingGeofenceId);\n    if (isExistingGeofenceId(this._editingGeofenceId, this._loadedGeofences)) {\n      this.editGeofence(this._editingGeofenceId);\n    } else {\n      this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n    }\n  }\n  // Disables add button and selecting items from geofence list\n  setEditingModeEnabled(enabled) {\n    enabled ? this._amplifyDraw.enable() : this._amplifyDraw.disable();\n    enabled ? this._drawGeofencesOutput.hide() : this._drawGeofencesOutput.show();\n    this._ui.setGeofenceListEnabled(!enabled);\n  }\n  updateInputRadius(event) {\n    const radiusString = event.target.value;\n    const radius = parseInt(radiusString);\n    if (isNaN(radius)) {\n      return;\n    }\n    this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId, radius);\n  }\n  addEditableGeofence() {\n    this._editingGeofenceId = \"tempGeofence\";\n    this._amplifyDraw.drawCircularGeofence(\"tempGeofence\");\n    this.setEditingModeEnabled(true);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}
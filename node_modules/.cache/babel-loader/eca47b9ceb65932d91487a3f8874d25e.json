{"ast":null,"code":"import * as e from \"react\";\nimport { isFunction as a } from \"../shared/utils.js\";\nimport { useComposeRefsCallback as l } from \"../../hooks/useComposeRefsCallback.js\";\nconst o = new Set([\"Escape\", \"Enter\"]),\n  n = _ref => {\n    let {\n      onSubmit: n,\n      onClear: s,\n      externalRef: t\n    } = _ref;\n    const [r, u] = e.useState(\"\"),\n      c = e.useRef(null),\n      f = l({\n        externalRef: t,\n        internalRef: c\n      }),\n      p = e.useCallback(() => {\n        var e;\n        u(\"\"), null === (e = null == c ? void 0 : c.current) || void 0 === e || e.focus(), a(s) && s();\n      }, [u, s]),\n      C = e.useCallback(e => {\n        a(n) && n(e);\n      }, [n]),\n      i = e.useCallback(e => {\n        const {\n          key: a\n        } = e;\n        o.has(a) && (e.preventDefault(), \"Escape\" === a ? p() : \"Enter\" === a && C(r));\n      }, [r, p, C]),\n      k = e.useCallback(e => {\n        u(e.target.value);\n      }, [u]),\n      m = e.useCallback(() => {\n        C(r);\n      }, [C, r]);\n    return {\n      value: r,\n      onClearHandler: p,\n      onKeyDown: i,\n      onInput: k,\n      onClick: m,\n      composedRefs: f\n    };\n  };\nexport { n as useSearchField };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { sleep } from \"./utils/sleep\";\nimport { WaiterState } from \"./waiter\";\n/**\n * Reference: https://awslabs.github.io/smithy/1.0/spec/waiters.html#waiter-retries\n */\nvar exponentialBackoffWithJitter = function (minDelay, maxDelay, attemptCeiling, attempt) {\n  if (attempt > attemptCeiling) return maxDelay;\n  var delay = minDelay * Math.pow(2, attempt - 1);\n  return randomInRange(minDelay, delay);\n};\nvar randomInRange = function (min, max) {\n  return min + Math.random() * (max - min);\n};\n/**\n * Function that runs polling as part of waiters. This will make one inital attempt and then\n * subsequent attempts with an increasing delay.\n * @param params options passed to the waiter.\n * @param client AWS SDK Client\n * @param input client input\n * @param stateChecker function that checks the acceptor states on each poll.\n */\nexport var runPolling = function (_a, input, acceptorChecks) {\n  var minDelay = _a.minDelay,\n    maxDelay = _a.maxDelay,\n    maxWaitTime = _a.maxWaitTime,\n    abortController = _a.abortController,\n    client = _a.client;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var state, currentAttempt, waitUntil, attemptCeiling, delay, state_1;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4 /*yield*/, acceptorChecks(client, input)];\n        case 1:\n          state = _c.sent().state;\n          if (state !== WaiterState.RETRY) {\n            return [2 /*return*/, {\n              state: state\n            }];\n          }\n          currentAttempt = 1;\n          waitUntil = Date.now() + maxWaitTime * 1000;\n          attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n          _c.label = 2;\n        case 2:\n          if (!true) return [3 /*break*/, 5];\n          if ((_b = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _b === void 0 ? void 0 : _b.aborted) {\n            return [2 /*return*/, {\n              state: WaiterState.ABORTED\n            }];\n          }\n          delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);\n          // Resolve the promise explicitly at timeout or aborted. Otherwise this while loop will keep making API call until\n          // `acceptorCheck` returns non-retry status, even with the Promise.race() outside.\n          if (Date.now() + delay * 1000 > waitUntil) {\n            return [2 /*return*/, {\n              state: WaiterState.TIMEOUT\n            }];\n          }\n          return [4 /*yield*/, sleep(delay)];\n        case 3:\n          _c.sent();\n          return [4 /*yield*/, acceptorChecks(client, input)];\n        case 4:\n          state_1 = _c.sent().state;\n          if (state_1 !== WaiterState.RETRY) {\n            return [2 /*return*/, {\n              state: state_1\n            }];\n          }\n          currentAttempt += 1;\n          return [3 /*break*/, 2];\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}
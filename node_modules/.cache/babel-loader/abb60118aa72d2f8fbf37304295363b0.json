{"ast":null,"code":"import destination from \"@turf/destination\";\nimport { polygon } from \"@turf/helpers\";\n/**\n * Takes a {@link Point} and calculates the circle polygon given a radius in degrees, radians, miles, or kilometers; and steps for precision.\n *\n * @name circle\n * @param {Feature<Point>|number[]} center center point\n * @param {number} radius radius of the circle\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.steps=64] number of steps\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {Object} [options.properties={}] properties\n * @returns {Feature<Polygon>} circle polygon\n * @example\n * var center = [-75.343, 39.984];\n * var radius = 5;\n * var options = {steps: 10, units: 'kilometers', properties: {foo: 'bar'}};\n * var circle = turf.circle(center, radius, options);\n *\n * //addToMap\n * var addToMap = [turf.point(center), circle]\n */\nfunction circle(center, radius, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // default params\n  var steps = options.steps || 64;\n  var properties = options.properties ? options.properties : !Array.isArray(center) && center.type === \"Feature\" && center.properties ? center.properties : {};\n  // main\n  var coordinates = [];\n  for (var i = 0; i < steps; i++) {\n    coordinates.push(destination(center, radius, i * -360 / steps, options).geometry.coordinates);\n  }\n  coordinates.push(coordinates[0]);\n  return polygon([coordinates], properties);\n}\nexport default circle;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __awaiter as e, __generator as r } from \"tslib\";\nimport { createMachine as t, sendUpdate as n } from \"xstate\";\nimport { runValidators as s } from \"../../../validators/index.js\";\nimport { clearError as o, clearFormValues as a, clearTouched as i, clearUsername as d, clearValidationError as l, handleInput as c, handleSubmit as u, handleBlur as m, setFieldErrors as p, setRemoteError as g, setUsername as v } from \"../actions.js\";\nimport { defaultServices as f } from \"../defaultServices.js\";\nfunction E(E) {\n  var h = E.services;\n  return t({\n    id: \"resetPasswordActor\",\n    initial: \"init\",\n    predictableActionArguments: !0,\n    states: {\n      init: {\n        always: [{\n          target: \"confirmResetPassword\",\n          cond: \"shouldAutoConfirmReset\"\n        }, {\n          target: \"resetPassword\"\n        }]\n      },\n      resetPassword: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              CHANGE: {\n                actions: \"handleInput\"\n              },\n              BLUR: {\n                actions: \"handleBlur\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"sendUpdate\", \"setUsername\", \"clearError\"],\n            invoke: {\n              src: \"resetPassword\",\n              onDone: {\n                target: \"#resetPasswordActor.confirmResetPassword\"\n              },\n              onError: {\n                actions: [\"setRemoteError\"],\n                target: \"edit\"\n              }\n            }\n          }\n        }\n      },\n      confirmResetPassword: {\n        type: \"parallel\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearUsername\", \"clearTouched\"],\n        states: {\n          validation: {\n            initial: \"pending\",\n            states: {\n              pending: {\n                invoke: {\n                  src: \"validateFields\",\n                  onDone: {\n                    target: \"valid\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"invalid\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              valid: {\n                entry: \"sendUpdate\"\n              },\n              invalid: {\n                entry: \"sendUpdate\"\n              }\n            },\n            on: {\n              CHANGE: {\n                actions: \"handleInput\",\n                target: \".pending\"\n              },\n              BLUR: {\n                actions: \"handleBlur\",\n                target: \".pending\"\n              }\n            }\n          },\n          submission: {\n            initial: \"idle\",\n            states: {\n              idle: {\n                entry: \"sendUpdate\",\n                on: {\n                  SUBMIT: {\n                    actions: \"handleSubmit\",\n                    target: \"validate\"\n                  },\n                  RESEND: \"resendCode\",\n                  CHANGE: {\n                    actions: \"handleInput\"\n                  },\n                  BLUR: {\n                    actions: \"handleBlur\"\n                  }\n                }\n              },\n              validate: {\n                entry: \"sendUpdate\",\n                invoke: {\n                  src: \"validateFields\",\n                  onDone: {\n                    target: \"pending\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              resendCode: {\n                tags: [\"pending\"],\n                entry: [\"clearError\", \"sendUpdate\"],\n                invoke: {\n                  src: \"resetPassword\",\n                  onDone: {\n                    target: \"idle\"\n                  },\n                  onError: {\n                    actions: \"setRemoteError\",\n                    target: \"idle\"\n                  }\n                }\n              },\n              pending: {\n                tags: [\"pending\"],\n                entry: [\"clearError\", \"sendUpdate\"],\n                invoke: {\n                  src: \"confirmResetPassword\",\n                  onDone: {\n                    actions: \"clearUsername\",\n                    target: \"#resetPasswordActor.resolved\"\n                  },\n                  onError: {\n                    actions: \"setRemoteError\",\n                    target: \"idle\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: \"final\"\n      }\n    }\n  }, {\n    actions: {\n      clearError: o,\n      clearFormValues: a,\n      clearTouched: i,\n      clearUsername: d,\n      clearValidationError: l,\n      handleInput: c,\n      handleSubmit: u,\n      handleBlur: m,\n      setFieldErrors: p,\n      setRemoteError: g,\n      setUsername: v,\n      sendUpdate: n()\n    },\n    guards: {\n      shouldAutoConfirmReset: function (e, r) {\n        return !(!e.intent || \"confirmPasswordReset\" !== e.intent);\n      }\n    },\n    services: {\n      resetPassword: function (t) {\n        return e(this, void 0, void 0, function () {\n          var e;\n          return r(this, function (r) {\n            return e = t.username, [2, h.handleForgotPassword(e)];\n          });\n        });\n      },\n      confirmResetPassword: function (t) {\n        return e(this, void 0, void 0, function () {\n          var e, n, s, o;\n          return r(this, function (r) {\n            return e = t.username, n = t.formValues, s = n.confirmation_code, o = n.password, [2, h.handleForgotPasswordSubmit({\n              username: e,\n              code: s,\n              password: o\n            })];\n          });\n        });\n      },\n      validateFields: function (t, n) {\n        return e(this, void 0, void 0, function () {\n          return r(this, function (e) {\n            return [2, s(t.formValues, t.touched, t.passwordSettings, [f.validateConfirmPassword])];\n          });\n        });\n      }\n    }\n  });\n}\nexport { E as resetPasswordActor };","map":null,"metadata":{},"sourceType":"module"}
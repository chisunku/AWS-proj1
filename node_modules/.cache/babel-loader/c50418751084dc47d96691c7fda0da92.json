{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { debounce } from \"debounce\";\nimport { createElement, removeElement } from \"../utils\";\nimport { createErrorIcon } from \"./icons\";\nimport { createEditIcon, createPopupStep1Icon, createPopupStep2Icon, createPopupStep3Icon, createPopupStep4Icon, createTrashIcon, createDeleteSuccessIcon, createCloseIcon } from \"./icons\";\nexport function AmplifyGeofenceControlUI(geofenceControl, geofenceControlContainer) {\n  let _addGeofenceContainer;\n  let _deleteGeofenceContainer;\n  let _addGeofencebutton;\n  let _checkboxAll;\n  let _geofenceList;\n  let _createContainer;\n  let _geofenceTitle;\n  let _checkBoxAllAndCreateContainer;\n  let _checkBoxAllContainer;\n  let _circleModeContainer;\n  let _polygonModeContainer;\n  let _deletePopdownContainer;\n  let _errorDiv;\n  let _geofenceCreateRadiusInput;\n  function registerControlPosition(map, positionName) {\n    if (map._controlPositions[positionName]) {\n      return;\n    }\n    const positionContainer = document.createElement(\"div\");\n    positionContainer.className = `maplibregl-ctrl-${positionName}`;\n    map._controlContainer.appendChild(positionContainer);\n    map._controlPositions[positionName] = positionContainer;\n  }\n  /************************************************************\n   * Create Geofence Controls\n   *************************************************************/\n  function createGeofenceCreateContainer(isCircle) {\n    const container = createElement(\"div\", \"geofence-ctrl-create-prompt-container\", geofenceControlContainer);\n    _createContainer = createElement(\"div\", \"geofence-ctrl-create-prompt\", container);\n    if (isCircle) {\n      /* Create buttons to switch between different modes */\n      const buttonContainer = createElement(\"div\", \"geofence-ctrl-create-prompt-buttons\", _createContainer);\n      const circleModeButton = createElement(\"div\", \"geofence-ctrl-create-prompt-button-circle geofence-ctrl-create-prompt-button\", buttonContainer);\n      circleModeButton.addEventListener(\"click\", () => {\n        // Change button selected style\n        circleModeButton.classList.add(\"geofence-ctrl-create-prompt-selected\");\n        polygonModeButton.classList.remove(\"geofence-ctrl-create-prompt-selected\");\n        // Switch info box mode\n        if (_polygonModeContainer) {\n          removeElement(_polygonModeContainer);\n          _polygonModeContainer = undefined;\n        }\n        if (!_circleModeContainer) createCircleModeCreateContainer(_createContainer);\n        geofenceControl.changeMode(\"draw_circle\");\n      });\n      circleModeButton.innerHTML = \"Circle\";\n      const polygonModeButton = createElement(\"div\", \"geofence-ctrl-create-prompt-button-polygon geofence-ctrl-create-prompt-button\", buttonContainer);\n      polygonModeButton.addEventListener(\"click\", () => {\n        geofenceControl.changeMode(\"draw_polygon\");\n        // Change button selected style\n        polygonModeButton.classList.add(\"geofence-ctrl-create-prompt-selected\");\n        circleModeButton.classList.remove(\"geofence-ctrl-create-prompt-selected\");\n        // Switch info box mode\n        if (_circleModeContainer) {\n          removeElement(_circleModeContainer);\n          _circleModeContainer = undefined;\n        }\n        if (!_polygonModeContainer) createPolygonModeCreateContainer(_createContainer);\n      });\n      polygonModeButton.innerHTML = \"Custom\";\n      circleModeButton.classList.add(\"geofence-ctrl-create-prompt-selected\");\n      createCircleModeCreateContainer(_createContainer);\n    } else {\n      createPolygonModeCreateContainer(_createContainer);\n    }\n  }\n  function createCircleModeCreateContainer(container) {\n    _circleModeContainer = createElement(\"div\", \"geofence-ctrl-create-circle-mode-container\", container);\n    const radiusTitle = createElement(\"div\", \"geofence-ctrl-create-circle-mode-title\", _circleModeContainer);\n    radiusTitle.innerHTML = \"Radius\";\n    _geofenceCreateRadiusInput = createElement(\"input\", \"geofence-ctrl-create-circle-mode-input\", _circleModeContainer);\n    _geofenceCreateRadiusInput.addEventListener(\"keydown\", debounce(geofenceControl.updateInputRadius, 200));\n  }\n  function createPolygonModeCreateContainer(container) {\n    _polygonModeContainer = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-container\", container);\n    const moreInfoContainer = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-info-container\", _polygonModeContainer);\n    const moreInfoIcon = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-icon\", moreInfoContainer);\n    const letterI = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-info-icon\", moreInfoIcon);\n    letterI.innerHTML = \"i\";\n    const moreInfo = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-title\", moreInfoContainer);\n    moreInfo.innerHTML = \"How it works?\";\n    const resetButton = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-reset-button geofence-ctrl-button\", _polygonModeContainer);\n    resetButton.innerHTML = \"Reset\";\n    resetButton.addEventListener(\"click\", () => {\n      geofenceControl.resetGeofence();\n    });\n    // Add popup onClick\n    const popup = createPolygonModeInfoPopup(moreInfoIcon);\n    moreInfoContainer.addEventListener(\"click\", () => {\n      popup.classList.toggle(\"show\");\n    });\n  }\n  function createPolygonModeInfoPopup(container) {\n    const popupContainer = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-popup-container\", container);\n    const popup = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-popup\", popupContainer);\n    createPopupStep(popup, \"Move dots to desired position\", createPopupStep1Icon());\n    createPopupStep(popup, \"Click on a border to create a dot\", createPopupStep2Icon());\n    createPopupStep(popup, \"Click into shape to move\", createPopupStep3Icon());\n    createPopupStep(popup, \"Press delete to remove a dot\", createPopupStep4Icon());\n    return popup;\n  }\n  function createPopupStep(container, text, image) {\n    const popupStep = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-popup-step\", container);\n    const popupStepImage = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-popup-step-image\", popupStep);\n    popupStepImage.appendChild(image);\n    const popupStepText = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-popup-step-text\", popupStep);\n    popupStepText.innerHTML = text;\n  }\n  function removeGeofenceCreateContainer() {\n    removeElement(_createContainer);\n    _createContainer = undefined;\n    _circleModeContainer = undefined;\n    _polygonModeContainer = undefined;\n  }\n  /************************************************************\n   * Geofence List\n   *************************************************************/\n  function createGeofenceListContainer() {\n    const geofenceListContainer = createElement(\"div\", \"geofence-ctrl-list-container\", geofenceControlContainer);\n    createGeofenceListHeader(geofenceListContainer);\n    _geofenceList = createElement(\"div\", \"geofence-ctrl-list\", geofenceListContainer);\n    _geofenceList.addEventListener(\"scroll\", () => {\n      const {\n        scrollHeight,\n        scrollTop,\n        clientHeight\n      } = _geofenceList;\n      if (scrollTop + clientHeight >= scrollHeight - 20) {\n        geofenceControl.loadMoreGeofences();\n      }\n    });\n  }\n  function createGeofenceListHeader(geofenceListContainer) {\n    const header = createElement(\"div\", \"geofence-ctrl-list-header\", geofenceListContainer);\n    _geofenceTitle = createElement(\"div\", \"geofence-ctrl-list-header-title\", header);\n    _geofenceTitle.innerHTML = \"Geofences (0)\";\n    _checkBoxAllAndCreateContainer = createElement(\"div\", \"geofence-ctrl-list-header-checkbox-create-container\", header);\n    createCheckboxAllContainer(_checkBoxAllAndCreateContainer);\n  }\n  function createCheckboxAllContainer(geofenceListContainer) {\n    _checkBoxAllContainer = createElement(\"div\", \"geofence-ctrl-list-checkbox-all-container\", geofenceListContainer);\n    _checkboxAll = createElement(\"input\", \"geofence-ctrl-list-checkbox-all\", _checkBoxAllContainer);\n    _checkboxAll.type = \"checkbox\";\n    _checkboxAll.addEventListener(\"click\", function () {\n      if (_checkboxAll.checked) {\n        geofenceControl.displayAllGeofences();\n        checkboxAllText.innerHTML = \"Deselect All\";\n      } else {\n        geofenceControl.hideAllGeofences();\n        checkboxAllText.innerHTML = \"Select All\";\n      }\n    });\n    const checkboxAllText = createElement(\"div\", \"geofence-ctrl-list-checkbox-all-title\", _checkBoxAllContainer);\n    checkboxAllText.innerHTML = \"Select all\";\n    _addGeofencebutton = createElement(\"div\", \"geofence-ctrl-list-header-add-button\", _checkBoxAllContainer);\n    _addGeofencebutton.innerHTML = \"+ Add\";\n    _addGeofencebutton.addEventListener(\"click\", () => {\n      createAddGeofenceContainer();\n    });\n  }\n  function renderListItem(geofence) {\n    const container = createElement(\"li\", \"geofence-ctrl-list-item-container\", _geofenceList);\n    container.id = `list-item-${geofence.geofenceId}`;\n    const listItem = createElement(\"li\", \"geofence-ctrl-list-item\", container);\n    const leftContainer = createElement(\"div\", \"geofence-ctrl-list-item-left-container\", listItem);\n    const checkbox = createElement(\"input\", \"geofence-ctrl-list-item-checkbox\", leftContainer);\n    checkbox.id = `list-item-checkbox-${geofence.geofenceId}`;\n    checkbox.type = \"checkbox\";\n    checkbox.addEventListener(\"click\", function () {\n      if (checkbox.checked) {\n        geofenceControl.displayGeofence(geofence.geofenceId);\n        geofenceControl.fitGeofence(geofence.geofenceId);\n      } else {\n        geofenceControl.hideGeofence(geofence.geofenceId);\n      }\n    });\n    const rightContainer = createElement(\"div\", \"geofence-ctrl-list-item-right-container\", listItem);\n    const geofenceTitleContainer = createElement(\"div\", \"geofence-ctrl-list-item-title-container\", rightContainer);\n    geofenceTitleContainer.addEventListener(\"mouseover\", function () {\n      geofenceControl.displayHighlightedGeofence(geofence.geofenceId);\n    });\n    geofenceTitleContainer.addEventListener(\"mouseout\", function () {\n      geofenceControl.hideHighlightedGeofence();\n    });\n    const geofenceTitle = createElement(\"div\", \"geofence-ctrl-list-item-title\", geofenceTitleContainer);\n    geofenceTitle.innerHTML = geofence.geofenceId;\n    const editButton = createElement(\"div\", \"geofence-ctrl-edit-button\", geofenceTitleContainer);\n    editButton.addEventListener(\"click\", function () {\n      geofenceControl.editGeofence(geofence.geofenceId);\n      createEditControls(listItem, rightContainer, leftContainer, geofence.geofenceId);\n      listItem.classList.remove(\"geofence-ctrl-list-item\");\n      listItem.classList.add(\"geofence-ctrl-list-selected-item\");\n    });\n    editButton.appendChild(createEditIcon());\n  }\n  function createEditControls(item, rightContainer, leftContainer, id) {\n    const editContainer = createElement(\"div\", \"geofence-ctrl-list-item-controls\", rightContainer);\n    const deleteButton = renderDeleteButton(leftContainer, id);\n    const removeEditContainer = () => {\n      item.classList.remove(\"geofence-ctrl-list-selected-item\");\n      item.classList.add(\"geofence-ctrl-list-item\");\n      removeElement(editContainer);\n      removeElement(deleteButton);\n    };\n    const cancelButton = createElement(\"div\", \"geofence-ctrl-cancel-button\", editContainer);\n    cancelButton.classList.add(\"geofence-ctrl-button\");\n    cancelButton.innerHTML = \"Cancel\";\n    cancelButton.addEventListener(\"click\", () => {\n      geofenceControl.setEditingModeEnabled(false);\n      removeEditContainer();\n    });\n    const saveGeofenceButton = createElement(\"div\", \"geofence-ctrl-save-button geofence-ctrl-button\", editContainer);\n    saveGeofenceButton.addEventListener(\"click\", () => __awaiter(this, void 0, void 0, function* () {\n      yield geofenceControl.saveGeofence();\n      removeEditContainer();\n    }));\n    saveGeofenceButton.title = \"Save\";\n    saveGeofenceButton.innerHTML = \"Save\";\n  }\n  /************************************************************\n   * Add Geofence Controls\n   *************************************************************/\n  function removeAddGeofenceContainer() {\n    removeElement(_addGeofenceContainer);\n    clearAddGeofenceError();\n    showCheckboxAllContainer();\n  }\n  function clearAddGeofenceError() {\n    if (_errorDiv) {\n      removeElement(_errorDiv);\n      _errorDiv = undefined;\n    }\n  }\n  function createAddGeofenceContainer() {\n    hideCheckboxAllContainer();\n    _addGeofenceContainer = createElement(\"div\", \"geofence-ctrl-add-geofence-container\", _checkBoxAllAndCreateContainer);\n    const addGeofencePrompt = createElement(\"div\", \"geofence-ctrl-add-geofence\", _addGeofenceContainer);\n    const nameInput = createElement(\"input\", \"geofence-ctrl-add-geofence-input\", addGeofencePrompt);\n    nameInput.placeholder = \"Enter name\";\n    const buttonContainer = createElement(\"div\", \"geofence-ctrl-add-geofence-buttons\", addGeofencePrompt);\n    const cancelButton = createElement(\"div\", \"geofence-ctrl-add-geofence-cancel-button geofence-ctrl-button \", buttonContainer);\n    cancelButton.innerHTML = \"Cancel\";\n    cancelButton.addEventListener(\"click\", () => {\n      removeAddGeofenceContainer();\n      geofenceControl.setEditingModeEnabled(false);\n    });\n    const saveButton = createElement(\"div\", \"geofence-ctrl-button geofence-ctrl-save-button\", buttonContainer);\n    saveButton.innerHTML = \"Save\";\n    saveButton.addEventListener(\"click\", function () {\n      return __awaiter(this, void 0, void 0, function* () {\n        clearAddGeofenceError();\n        const output = yield geofenceControl.createGeofence(escape(nameInput.value));\n        if (output) removeAddGeofenceContainer();\n      });\n    });\n    geofenceControl.addEditableGeofence();\n  }\n  function createAddGeofencePromptError(error) {\n    if (_errorDiv) {\n      return;\n    }\n    _errorDiv = createElement(\"div\", \"geofence-ctrl-add-geofence-error\", _addGeofenceContainer);\n    const errorIconContainer = createElement(\"div\", \"geofence-ctrl-add-geofence-error-icon\", _errorDiv);\n    errorIconContainer.appendChild(createErrorIcon());\n    const errorText = createElement(\"div\", \"geofence-ctrl-add-geofence-error-text\", _errorDiv);\n    errorText.innerHTML = error;\n  }\n  /************************************************************\n   * Delete Controls\n   *************************************************************/\n  function renderDeleteButton(container, id) {\n    const deleteButton = createElement(\"div\", \"geofence-ctrl-delete-button\", container);\n    deleteButton.classList.add(\"geofence-ctrl-button\");\n    deleteButton.addEventListener(\"click\", function () {\n      createConfirmDeleteContainer(id);\n    });\n    deleteButton.appendChild(createTrashIcon());\n    return deleteButton;\n  }\n  function createConfirmDeleteContainer(geofenceId) {\n    _deleteGeofenceContainer = createElement(\"div\", \"geofence-ctrl-delete-prompt-container\", geofenceControlContainer);\n    const deleteGeofencePrompt = createElement(\"div\", \"geofence-ctrl-delete-prompt\", _deleteGeofenceContainer);\n    const title = createElement(\"div\", \"geofence-ctrl-delete-geofence-title\", deleteGeofencePrompt);\n    title.innerHTML = `Are you sure you want to delete <strong>${geofenceId}</strong>?`;\n    createDeleteButtonsContainer(deleteGeofencePrompt, geofenceId);\n  }\n  function createDeleteButtonsContainer(container, geofenceId) {\n    const deleteButtonsContainer = createElement(\"div\", \"geofence-ctrl-delete-geofence-buttons\", container);\n    const cancelButton = createElement(\"div\", \"geofence-ctrl-delete-geofence-cancel-button\", deleteButtonsContainer);\n    cancelButton.innerHTML = \"Cancel\";\n    cancelButton.addEventListener(\"click\", () => {\n      removeElement(_deleteGeofenceContainer);\n    });\n    const confirmDeleteButton = createElement(\"div\", \"geofence-ctrl-delete-geofence-confirm-button\", deleteButtonsContainer);\n    confirmDeleteButton.innerHTML = \"Delete\";\n    confirmDeleteButton.addEventListener(\"click\", function () {\n      return __awaiter(this, void 0, void 0, function* () {\n        const id = yield geofenceControl.deleteGeofence(geofenceId);\n        if (id) {\n          createDeleteResultContainer(true);\n          removeElement(_deleteGeofenceContainer);\n          geofenceControl.setEditingModeEnabled(false);\n        }\n      });\n    });\n  }\n  function createDeleteResultContainer(success) {\n    _deletePopdownContainer = createElement(\"div\", \"geofence-ctrl-delete-popdown-container\", geofenceControlContainer);\n    const deletePopdown = createElement(\"div\", \"geofence-ctrl-delete-popdown\", _deletePopdownContainer);\n    const deletePopdownCloseButton = createElement(\"div\", \"geofence-ctrl-delete-popdown-close-button\", _deletePopdownContainer);\n    deletePopdownCloseButton.appendChild(createCloseIcon());\n    deletePopdownCloseButton.addEventListener(\"click\", () => {\n      removeElement(_deletePopdownContainer);\n    });\n    const deleteSuccessIcon = createElement(\"div\", \"geofence-ctrl-delete-popdown-icon\", deletePopdown);\n    deleteSuccessIcon.appendChild(createDeleteSuccessIcon());\n    const deletePopdownText = createElement(\"div\", \"geofence-ctrl-delete-popdown-text\", deletePopdown);\n    deletePopdownText.innerHTML = success ? \"Geofence was deleted successfully\" : \"Geofence failed to delete\";\n  }\n  /************************************************************\n   * Utility Methods\n   *************************************************************/\n  function updateCheckbox(geofenceId, checked) {\n    const checkbox = document.getElementById(`list-item-checkbox-${geofenceId}`);\n    if (checkbox) checkbox.checked = checked;\n  }\n  function removeGeofenceListItem(geofenceId) {\n    const listItem = document.getElementById(`list-item-${geofenceId}`);\n    removeElement(listItem);\n  }\n  function setGeofenceListEnabled(enabled) {\n    _checkboxAll.disabled = !enabled;\n    enabled ? _addGeofencebutton.classList.remove(\"geofence-ctrl-noHover\") : _addGeofencebutton.classList.add(\"geofence-ctrl-noHover\");\n    const inputs = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n    for (let i = 0; i < inputs.length; i++) {\n      inputs.item(i).disabled = !enabled;\n    }\n    const items = document.getElementsByClassName(\"geofence-ctrl-list-item-container\");\n    for (let i = 0; i < items.length; i++) {\n      enabled ? items.item(i).classList.remove(\"geofence-ctrl-noHover\") : items.item(i).classList.add(\"geofence-ctrl-noHover\");\n    }\n  }\n  function getCheckboxAllValue() {\n    return _checkboxAll.checked;\n  }\n  function updateGeofenceCount(count) {\n    _geofenceTitle.innerHTML = `Geofences (${count})`;\n  }\n  function updateGeofenceRadius(radius) {\n    if (_geofenceCreateRadiusInput) _geofenceCreateRadiusInput.value = `${radius}`;\n  }\n  function hideCheckboxAllContainer() {\n    _checkBoxAllContainer.style.display = \"none\";\n  }\n  function showCheckboxAllContainer() {\n    _checkBoxAllContainer.style.display = \"flex\";\n  }\n  return {\n    registerControlPosition,\n    createElement,\n    removeElement,\n    createGeofenceCreateContainer,\n    createGeofenceListContainer,\n    removeAddGeofenceContainer,\n    createAddGeofencePromptError,\n    renderListItem,\n    updateCheckbox,\n    removeGeofenceListItem,\n    setGeofenceListEnabled,\n    getCheckboxAllValue,\n    removeGeofenceCreateContainer,\n    updateGeofenceCount,\n    updateGeofenceRadius\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
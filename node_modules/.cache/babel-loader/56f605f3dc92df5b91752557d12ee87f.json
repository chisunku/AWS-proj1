{"ast":null,"code":"export function isCoordinates(array) {\n  return Array.isArray(array) && typeof array[0] === \"number\" && typeof array[1] === \"number\";\n}\nexport function isCoordinatesArray(array) {\n  return isCoordinates(array[0]);\n}\nexport function isNamedLocation(object) {\n  return object && Array.isArray(object.coordinates) && typeof object.coordinates[0] === \"number\" && typeof object.coordinates[1] === \"number\";\n}\nexport function isNamedLocationArray(array) {\n  return isNamedLocation(array[0]);\n}\nexport function isGeofence(object) {\n  return object && typeof object.geofenceId === \"string\" && typeof object.geometry === \"object\";\n}\nexport function isGeofenceArray(array) {\n  return Array.isArray(array) && isGeofence(array[0]);\n}\nexport function isPolygon(object) {\n  return Array.isArray(object) && isCoordinatesArray(object[0]);\n}\nexport function isPolygonArray(array) {\n  return Array.isArray(array) && isPolygon(array[0]);\n}\nexport function isGeoJsonSource(source) {\n  return source.type === \"geojson\";\n}\nexport const strHasLength = str => typeof str === \"string\" && str.length > 0;\nexport const getFeaturesFromData = data => {\n  let features;\n  if (isCoordinatesArray(data)) {\n    features = data.map(point => {\n      return {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: point\n        },\n        properties: {\n          place_name: `Coordinates,${point}`\n        }\n      };\n    });\n  } else if (isNamedLocationArray(data)) {\n    features = data.map(location => {\n      return {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: location.coordinates\n        },\n        properties: {\n          title: location.title,\n          address: location.address\n        }\n      };\n    });\n  } else {\n    features = data;\n  }\n  return features;\n};\nexport const urlEncodePeriods = str => {\n  return str.replace(/\\./g, \"%2E\");\n};\nexport function validateCoordinates(coordinates) {\n  const [lng, lat] = coordinates;\n  if (!Number.isFinite(lng) || !Number.isFinite(lat)) {\n    throw new Error(`Invalid coordinates: [${lng},${lat}]`);\n  }\n  if (lat < -90 || lat > 90) {\n    const errorString = \"Latitude must be between -90 and 90 degrees inclusive.\";\n    console.warn(errorString);\n    throw new Error(errorString);\n  } else if (lng < -180 || lng > 180) {\n    const errorString = \"Longitude must be between -180 and 180 degrees inclusive.\";\n    console.warn(errorString);\n    throw new Error(errorString);\n  }\n}\nexport function createElement(tagName, className, container) {\n  const el = window.document.createElement(tagName);\n  if (className !== undefined) el.className = className;\n  if (container) container.appendChild(el);\n  return el;\n}\nexport function removeElement(node) {\n  if (node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}
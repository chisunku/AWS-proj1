{"ast":null,"code":"import { __rest as e } from \"tslib\";\nimport * as t from \"react\";\nimport r from \"classnames\";\nimport { classNameModifier as i } from \"../shared/utils.js\";\nimport { ComponentClassNames as o } from \"../shared/constants.js\";\nimport { splitPrimitiveProps as s } from \"../shared/styleUtils.js\";\nimport \"../Field/FieldClearButton.js\";\nimport { FieldDescription as n } from \"../Field/FieldDescription.js\";\nimport { FieldErrorMessage as a } from \"../Field/FieldErrorMessage.js\";\nimport { FieldGroup as l } from \"../FieldGroup/FieldGroup.js\";\nimport { Flex as d } from \"../Flex/Flex.js\";\nimport { Input as m } from \"../Input/Input.js\";\nimport { Label as p } from \"../Label/Label.js\";\nimport { isTextAreaField as c, isTextAreaRef as f, isInputField as u, isInputRef as h } from \"./utils.js\";\nimport { TextArea as b } from \"../TextArea/TextArea.js\";\nimport { useStableId as E } from \"../utils/useStableId.js\";\nimport { useDeprecationWarning as g } from \"../../hooks/useDeprecationWarning.js\";\nconst j = 3,\n  F = (j, F) => {\n    const {\n        className: x,\n        descriptiveText: C,\n        errorMessage: v,\n        hasError: y = !1,\n        id: S,\n        label: T,\n        labelHidden: w = !1,\n        outerEndComponent: M,\n        outerStartComponent: I,\n        innerStartComponent: z,\n        innerEndComponent: H,\n        isMultiline: N,\n        type: A,\n        size: L,\n        testId: O,\n        variation: P,\n        bottom: D,\n        height: G,\n        left: W,\n        padding: k,\n        position: B,\n        right: R,\n        top: U,\n        width: q\n      } = j,\n      J = e(j, [\"className\", \"descriptiveText\", \"errorMessage\", \"hasError\", \"id\", \"label\", \"labelHidden\", \"outerEndComponent\", \"outerStartComponent\", \"innerStartComponent\", \"innerEndComponent\", \"isMultiline\", \"type\", \"size\", \"testId\", \"variation\", \"bottom\", \"height\", \"left\", \"padding\", \"position\", \"right\", \"top\", \"width\"]),\n      K = E(S),\n      Q = E(),\n      V = C ? Q : void 0,\n      {\n        flexContainerStyleProps: X,\n        baseStyleProps: Y,\n        rest: Z\n      } = s(J);\n    g({\n      shouldWarn: j.isMultiline,\n      message: \"TextField isMultiLine prop will be deprecated in next major release of @aws-amplify/ui-react. Please use TextAreaField component instead.\"\n    });\n    let $ = null;\n    if (c(j)) {\n      const {\n        rows: e\n      } = j;\n      $ = t.createElement(b, Object.assign({\n        \"aria-describedby\": V,\n        hasError: y,\n        id: K,\n        ref: f(j) ? F : void 0,\n        rows: null != e ? e : 3,\n        size: L,\n        variation: P\n      }, Y, Z));\n    } else if (u(j)) {\n      const {\n        type: e = \"text\"\n      } = j;\n      $ = t.createElement(m, Object.assign({\n        \"aria-describedby\": V,\n        hasError: y,\n        id: K,\n        ref: h(j) ? F : void 0,\n        size: L,\n        type: e,\n        variation: P\n      }, Y, Z));\n    }\n    return t.createElement(d, Object.assign({\n      className: r(o.Field, i(o.Field, L), o.TextField, x),\n      bottom: D,\n      \"data-size\": L,\n      height: G,\n      left: W,\n      padding: k,\n      position: B,\n      right: R,\n      testId: O,\n      top: U,\n      width: q\n    }, X), t.createElement(p, {\n      htmlFor: K,\n      visuallyHidden: w\n    }, T), t.createElement(n, {\n      id: Q,\n      labelHidden: w,\n      descriptiveText: C\n    }), t.createElement(l, {\n      outerStartComponent: I,\n      outerEndComponent: M,\n      innerStartComponent: z,\n      innerEndComponent: H,\n      variation: P\n    }, $), t.createElement(a, {\n      hasError: y,\n      errorMessage: v\n    }));\n  },\n  x = t.forwardRef(F);\nF.displayName = \"TextField\";\nexport { j as DEFAULT_ROW_COUNT, x as TextField };","map":null,"metadata":{},"sourceType":"module"}